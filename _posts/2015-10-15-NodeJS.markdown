---
layout: post
title:  "The wonderful world of Node"
date:   2015-10-15 00:31:45
categories: Node
image:
image-subtitle:
---

I've been learning about Node.js this week. Previously this extended about as far as using node package manager to declare dependencies on node modules I needed and playing with things in the Terminal using the REPL environment. Oh, and debugging a lot of Makers students' Node installations, which threw up a few interesting errors. Mainly that led to uninstalling the damned thing including a load of files which tended to be scattered around everywhere, then reinstalling with Homebrew. Lovely, lovely Homebrew.

##So, what is Node.js?

It's a cross-platform runtime environment for developing **server-side web applications**, and interestingly the whole thing is open-source. According to the Node.js website, 'Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient'. This kind of means that it achieves concurrency through events and callbacks, even though it's a single threaded application.

I'm excited to be finally working with JavaScript on the server side, after doing quite a lot of <a href="https://github.com/natstar93/clothing_shop" target='blank'>JavaScript things on the front end recently</a>. (Blog post on React.js coming soon too).

###Callbacks

It's probably worth mentioning callbacks here since I don't think I've written about them previously. Callback functions are executed at the end of a given task. They're useful as they mean that the program can go off and do something else in the meantime, and when the first task has been completed the program receives a signal that task 1 has delivered the required output and is ready to execute the next part using that output. This kind of setup is known as non-blocking.

#### Example of Blocking

    var fs = require('fs');
    var data = fs.readFileSync('nat.txt')

    console.log(data.toString());
    console.log('Something else');

Output

    > Whatever stupid data is in my file
    > Something else

In this example the data file will be read and the result outputted, then after all that's done the program will move on to the second console.log and output the string 'Something else'.

#### Example of Non-Blocking

    var fs = require('fs');

    var data = fs.readFileSync('nat.txt', function (error, data) {
      if (error) return console.log('error');
      console.log(data.toString());
    });

    console.log('Something else');

Output

    > Something else
    > Whatever stupid data is in my file

In this example the string 'Something else' will actually be outputted first, while the program is processing the data read in from the nat.txt file. Once the data has been read it will be logged. If the data file cannot be read, an error message will be logged instead.

###Events
Callbacks are great, but when there are more than two events and/or they need to be called multiple times, events are used. They're more flexible and more powerful...

Instead of using asynchronous functions which execute upon the return of a result, a number of event listeners are set up to watch for certain signals or state changes. These listeners are also known as Observers. Node.js has a module called 'events' which needs to be required in order for this all to work.

Here's an example of event handlers and emitters:

    var events = require('events');
    var eventEmitter = new events.EventEmitter();

    var myFirstEventHandler = function first() {
      console.log('First event handler fired');
    }

    eventEmitter.on('firstEvent', myFirstEventHandler);

    eventEmitter.emit('firstEvent');

Run that with node and see what happens...

Also, check out what gets returned here if you type each line into a REPL environment:

    > eventEmitter.on('firstEvent', myFirstEventHandler);

    { domain: null,
      _events: { firstEvent: [Function: first] },
      _maxListeners: 10 }

The event emitter is returned, so this can be used for chaining calls together.

Nat x
