---
layout: post
title:  "A Moment in Timezone"
date:   2016-05-02 22:53:20
categories: moment, testing, BDD, timezone, stubbing, sinon
image:
image-subtitle:
---

I noticed recently that an application in production was failing acceptance tests which checked that a user's selected journey date was correctly displayed (and logged to the database). The root cause of this was that the BrowserStack server the tests were running on was an hour ahead of the timezone I was in. This was a fortunate catch since the tool currently does not allow timezone to be specified for testing purposes. Obviously I am now lobbying them to introduce this feature! The issue will become more important as the company I work for ventures into Europe and allows users to book journeys which cross timezones.

The application uses React and renders on the server side, which is set to the London/Lisbon timezone (UTC+1 at the time of writing). However, the selected date was being saved as a date object based on the timezone the user is in, which could be anywhere in the world.

Clearly this fix needed a few unit tests to describe the different situations that should be checked.

####Enter <a href='http://momentjs.com/timezone/'>Moment Timezone</a>, Sinon and a BDD-style approach!

Moment is awesome. Moment objects contain a lot of information about a particular datestamp and there exist a lot of different functions you can call on them to format and compare them. As such, moment is pretty widely used. What I needed though was an easy way of specifying the timezone of the test - a way of stubbing out the time and the timezone of the user or server running it.

I used sinon to stub the time to a chosen datestamp (rather than hardcoding a test datestamp in which will eventually be a date in the past), and moment timezone to choose the client/user's timezone.

I tested that
1. The initial default date is selected correctly (as the current date in the UK)
2. When a user selects a new date, the date updates correctly

### Initial default date selected correctly

This test checks that the datestamp is correctly set in the initial state when the page loads, regardless of timezone. The datestamp is the current datestamp in the UK.

    import sinon from 'sinon';

		describe('sets the departure date to current UK date', () => {
			let sandbox;

			beforeEach(() => {
				sandbox = sinon.sandbox.create();
			});

			afterEach(() => {
				sandbox.restore();
			});

			it('from a different timezone', (done) => {
				const testDate = moment('2016-06-09T20:30:00-09:00');
				sandbox.useFakeTimers((new Date(testDate)).getTime());
				const request = {
					email: '',
					from: '',
					to: '',
					'depart-date': '2016-06-10T04:30:00+01:00',
					'return-date': '',
					errors: {},
				};
				const component = createComponent(<TicketAlert ticketAlertRequest={request} />);
				expect(component.state['depart-date']).to.deep.equal('2016-06-10T04:30:00+01:00');
				done();
			});
		});

### Date updates correctly

The test essentially checks that when the user in the +1 timezone chooses a date, the program coverts the selected date to the correct datestamp using UTC time rather than the user's current timezone.

`moment.tz.setDefault('Europe/Paris')` is used to choose the user's current timezone.

		import sinon from 'sinon';

		describe('sets the return date to current UK date', () => {
			let sandbox;

			beforeEach(() => {
				sandbox = sinon.sandbox.create();
			});

			afterEach(() => {
				sandbox.restore();
			});

			it('from timezone 1 hour ahead of the UK', (done) => {
				const testDate = moment('2016-12-10T08:30:00+00:00');  
				sandbox.useFakeTimers((new Date(testDate)).getTime());  // sets test datestamp
				moment.tz.setDefault('Europe/Paris');  // sets test timezone
				const request = {
					email: '',
					from: '',
					to: '',
					'depart-date': '2016-12-10T08:30:00+00:00',
					'return-date': '',
					errors: {},
				}; // this is just the initial prop that is passed in on page load
				const component = createComponent(<TicketAlert ticketAlertRequest={request} />);
				const selectedReturnDate = moment('2016-12-14T00:00:00+01:00', moment.ISO_8601);
				component.onReturnChanged(selectedReturnDate);  // selects the chosen date
				expect(component.state['return-date']).to.deep.equal('2016-12-14T00:00:00+00:00');
				done();
			});
		});

The fix was a lot easier to write than the tests were! And that's the way development should be. It used moment timezone to check the user's timezone offset and incorporate it in the datestamp calculations.

To be on the safe side (and ensure my system time was being stubbed out correctly in the tests) I hosted the updated application on my Mac and accessed it from a VM of which I had reset the system time to another timezone. The application performed as expected :)

Nat x
