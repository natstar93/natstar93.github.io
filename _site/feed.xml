<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Diary of a Developer</title>
    <description>A blog following my journey through Makers Academy and beyond...
</description>
    <link>http://natstar93.github.io//</link>
    <atom:link href="http://natstar93.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 16 Jul 2015 08:25:01 +0100</pubDate>
    <lastBuildDate>Thu, 16 Jul 2015 08:25:01 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Day 28 | Makerthon part 1</title>
        <description>&lt;p&gt;A makerthon is basically a mini hackathon, except there’s no prize at the end. The aim is to build a fully tested product in an agile way, using kanban and ensuring regular team stand ups are held. It’s better to create something that works and has just a couple of features than something that has a lot of half-built over-ambitious features.&lt;/p&gt;

&lt;p&gt;Ideas were pitched and voted on, and I was pleased to end up in the Music Quiz team based on my votes. We chose to read up on kanban, gihub collaboration and the learning objectives before starting our meeting, which was a wise move I think. Our planning meeting was very successful and gave us a solid MVP plan to work on. Kate and I made up the back end team and the two Lucys started researching feature testing for JavaScript.&lt;/p&gt;

&lt;p&gt;The backend for the MVP turned out to be fairly simple initially, with the Game function keeping track of score and telling the front end when the quiz had terminated. We started researching the Soundcloud API and tried to figure out whether we could get tracks to play without displaying their title and artist name. The front end team were having some difficulties with feature testing. It turns out there isn’t much in the way of feature testing for Javascript and we’re hoping we find out more about it in advanced JS week. Another problem was that the front end was not using the back end outputs in the way we had presumed. I’m starting to think maybe stand ups don’t cut it when it comes to collaborating on a project such as this. Going through the code base as a team might be a necessary complimentary activity.&lt;/p&gt;

&lt;p&gt;I realised that the data for the quiz really should be coming through the back end. It sounds really obvious but I think somewhere along the way we confused ourselves by thinking about two things: that the front end displays the questions and options, and that the recent thermostat project worked by pulling API data into the front end to simply display it. Our program does more than that though, and needs the backend to know the answer to each question (a, b or c) in order to compare it to user input, so it makes more sense for it to accept the quiz data initially. I started looking at how the back end could organise the data into various arrays and supply the correct outputs to the front end for each round. By the end of the evening I had a little working ‘MMVP’ which I’m looking forward to sharing with the group.&lt;/p&gt;

&lt;p&gt;After proceeding very cautiously with Github we managed to successfully collaborate on a repo and pull and push to and from development branch and feature branches. We ended the day with 0 merge conflicts to sort out and understanding way more about gihub than when we started! It’s important that the same file isn’t worked on by two people at the same time, so communication and knowledge of responsibilities is key. This seems to be a general theme for project work as a whole.&lt;/p&gt;

&lt;p&gt;Here are my notes on how to merge a feature branch:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Commit changes whilst still on your feature branch
Checkout to your local development branch
Pull from Github development branch to get latest version of codebase
Merge local feature branch into local development branch
Push changes to Github 

  561  git add .
  562  git commit -m &#39;Added game termination logic&#39;
  563  git checkout development
  564  git pull origin development
  565  git merge score-logic
  566  git push origin development
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Jul 2015 23:07:40 +0100</pubDate>
        <link>http://natstar93.github.io//week6/2015/07/15/day-28.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week6/2015/07/15/day-28.html</guid>
        
        
        <category>week6</category>
        
      </item>
    
      <item>
        <title>Day 27 | Spring cleaning a database and freezing time</title>
        <description>&lt;p&gt;Today we resumed work on the extended Chitter challenge. We created a nice interface and sorted out some of the navigation issues, so the whole thing looks like more of a working product now. We definitely learnt a lot from the project, even if it was slow progress. One of the most difficult things is working out the correct datamapper commands for your normal SQL processes. Having barely touched upon joining SQL tables in this course didn’t help matters! As always, we’d been given just enough information to go away and find the solutions for ourselves.&lt;/p&gt;

&lt;p&gt;This evening I made the finishing touches to my Chitter repo, correcting things like the below&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;validates_uniqueness_of :email, :username
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which became the last part of this line&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;property :email, String, unique: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Want to know why? Well, the first statement only validates the uniqueness of an email address on the application level, whereas the latter checks it at the database level. This means any data entered directly, or a duplicate entry happening at the very same moment would not be rejected and you may end up with two of the same email address in your database. Not ideal really.&lt;/p&gt;

&lt;p&gt;Other fixes involved moving a couple of stray bits of logic away from the display files and into the backend where they belong, and making sure that a full time object is stored in the database for each peep instead of the ‘pretty time’ string I had created. As usual, the time is made pretty on the front end, where the display logic lives. This is the third time I’ve had cause to mention separation of display logic and backend logic in recent posts. It does seem to be a major theme these days now that we’ve moved into full stack development.&lt;/p&gt;

&lt;p&gt;Another silly thing I’d done was duplicate the username in both my user and peeps tables (lets just call peeps messages from now on, since peeps is such a silly word). This is uneccessary information since the tables are associated by a key already. The correct way to pull the username for a particular message out is to 
• look through the Message table to find that message’s associated user ID 
• find that user ID in the Users table and pull out the associated username
It sounds a bit longwinded but it’s really not, and it’s better than having a messy database.&lt;/p&gt;

&lt;p&gt;I discovered a cool gem called Timecop which can actually freeze time! In a testing sense that is. One of its many functions is to stub the time with a value you give it, so that your tests can be accurate and don’t depend on the real time, which by its very nature changes a lot.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Timecop.freeze(Time.local(2015))
post(peep)
expect(page).to have_content(&quot;00:00 01/01/2015&quot;)
Timecop.return
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that I had a look through my bowling challenge again, and converted it to a bowling scorecard which relies on user input instead of random numbers. This was a fairly painless process and took about 5 minutes! It’s very satisfying seeing my 37 red tests go green in such a short space of time. The next tasks for my ever evolving bowling project are creating an interface and adding in something which outputs the score obtained by each round. At the moment strike bonuses are being simply added into the pot rather than attributed to the appropriate rounds. More on this another day though..&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Jul 2015 23:22:57 +0100</pubDate>
        <link>http://natstar93.github.io//week6/2015/07/14/day-27.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week6/2015/07/14/day-27.html</guid>
        
        
        <category>week6</category>
        
      </item>
    
      <item>
        <title>Day 26 | Error: Floor has already been spied upon</title>
        <description>&lt;p&gt;I spent most of Sunday working on the Bowling Challenge, which was essentially a day long logic problem. So I had a very nice day :) The challenge is to model a bowling game which I took to mean a game with random inputs. The other interpretation is a bowling scorecard which tots up scores based on a user’s input. It turns out we have until next week to complete it so I’m going to branch my repo and do a scorecard version too, before implementing an animated jQuery interface. Modelling bowling scoring can be a little tricky, with spares and strikes causing scoring to be a lot less linear than one might hope. My code passed the Travis CI build test, but I’m still suspicious that a certain combination of strikes and spares in the end round might need a bit more testing.&lt;/p&gt;

&lt;p&gt;Choosing the random scores approach meant I had to use spies in my Jasmine test, so I’m glad I chose that approach first. There’s not that much to say about them at this stage, other than that they work in a similar way to doubles and to Factory Girl. They also have the potential to throw up some interesting error messages, such as the title of this blog post.&lt;/p&gt;

&lt;p&gt;This week is lab week, a week that traditionally enables you to revisit previous projects or research something new. However, very recently the concept was overhauled and we’ve been put into small groups to do a small task based on a previous project.&lt;/p&gt;

&lt;p&gt;My group was given the task of extending the Chitter challenge, which is not what I would have picked considering we only did it a week ago and I spent more time on it that any previous challenge. The majority of the day was spent setting up a version of Chitter that allows user management and tagging, which wasn’t really anything new yet managed to throw up the occassional irritating config bug that stumped even the alumni helpers. All good practice I guess though. The post-yoga hours were spent implementing some nice CSS and a little bit more functionality. I think tomorrow will be more interesting and hopefully we’ll end the day having produced some cool new features!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Jul 2015 23:18:54 +0100</pubDate>
        <link>http://natstar93.github.io//week6/2015/07/13/day-26.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week6/2015/07/13/day-26.html</guid>
        
        
        <category>week6</category>
        
      </item>
    
      <item>
        <title>Day 25 | Week 5 learning plan</title>
        <description>&lt;p&gt;&lt;strong&gt;Most Important Things I Learned:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Hoisting&lt;br /&gt;
• API calls/JSON files&lt;br /&gt;
• CSS transitions&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Things I Struggled With The Most:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Google maps geolocation &lt;br /&gt;
• Working with Ruby and JavaScript at the same time. Working out what will be passed from the Ruby controller to the JS, and how! (jQuery $.get call which passes the return value of the controller get ‘/’ method - for some reason it really confused me)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Changes I Plan to Make Next Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Try and think of a breakout idea that people would be interested in (perhaps something to do with animations e.g. CSS transitions and jQuery animate/hide&amp;amp;show etc)&lt;br /&gt;
• Work at home in the evenings. For some reason I don’t seem to work that well after about 5:30 at Makers on non-yoga days but can be very productive after dinner at home.&lt;br /&gt;
• More blog posts! It seems to have dropped off a bit this week :(&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please add which project you’ll be working on for lab week and who you’ll be working with:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apollo byte&lt;/p&gt;

&lt;p&gt;Team 1 - Extend Chitter&lt;/p&gt;

&lt;p&gt;Natalie A
Nicola
Kirsten
Massi
Alex&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other Experiences or General Feedback This Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• I much preferred the 1:30 stand up slot as I feel less time was wasted. Also it’s really hard to get fully into meditation sessions (2 - 2:20) when you can hear your byte starting their standup next door!&lt;br /&gt;
• I enjoyed the seniors’ graduation presentations, but I am also a bit scared now. It’s made me realise that it’s probably a good idea to start thinking of project ideas from now on.. Also, striking a balance between features and simplicity is going to be important in order to make something which works robustly in a short space of time&lt;br /&gt;
• I feel like we’re now at the stage where we can make something complete, from the inside out. Looking forward to the makerthon and lab week projects to see how we do this in a group situation (I imagine it’s pretty difficult!)&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Jul 2015 19:17:34 +0100</pubDate>
        <link>http://natstar93.github.io//week5/2015/07/10/day-25.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week5/2015/07/10/day-25.html</guid>
        
        
        <category>week5</category>
        
      </item>
    
      <item>
        <title>Day 24 | API days</title>
        <description>&lt;p&gt;The tube strike threw a bit of a spanner in the works today by preventing a third of the class from getting in. A lot of the people who did make it in had to get up really early and leave early, but we managed to get what we needed to do done anyway! Pairs were reshuffled based on who was actually present, and other people were remotely watching the talks and attending google hangouts standups.&lt;/p&gt;

&lt;p&gt;Mike and I started by refactoring the existing code. One of the consequences of switching pairs every day is that you often end up with a codebase that performs like the one you wrote, but isn’t the same. I had actually forgotten that my current codebase wasn’t the one I’d written myself so we had to go through and refactor some methods and tests to make sure they were as concise and logically sound as the ones I’d created previously. When working with a back end and front end JS file it’s important to keep the display logic out of the back end and ensure the front end makes those assigments/decisions based on calls to the logic that goes on ‘under the bonnet’.&lt;/p&gt;

&lt;p&gt;I’d whipped up a stylesheet the night before so by 11:30am our little program was looking lovely both outside and in! I realised that I should really make the effort to check everything through every single time I inherit a new codebase. The logic for Thermometer was not that complex, but with more advanced programs it would be hard to build new features without going through the code with a fine toothed comb at the beginning of the day. For a simple codebase it’s still best to go through everything to ensure you don’t get stumped by something later.&lt;/p&gt;

&lt;p&gt;We implemented automatic location finding using HTML5 Geolocation and a Google maps API. We then passed the coordinates we’d found into a call to the Open Weather API. These kinds of API calls illustrate the necessity for JS callbacks. Callbacks basically wait for one thing to happen before the next function is executed, so you can prevent your code from attempting to work on a JSON file until the file has been loaded properly.&lt;/p&gt;

&lt;p&gt;Here’s a nice jQuery example I stole from W3schools:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&quot;button&quot;).click(function(){
    $(&quot;p&quot;).hide(&quot;slow&quot;, function(){
        alert(&quot;The paragraph is now hidden&quot;);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the paragraph has finished hiding, an alert is executed.&lt;/p&gt;

&lt;p&gt;In addition to all this, I made my own API which records my thermostat’s temperature (and the time) each time the temperature is changed. It might not be the most exciting API you’ve ever heard of but it allows my Thermometer to recall its last temperature even if the browser is reloaded or reopened. This means the temperature can persist between sessions.&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Jul 2015 22:40:17 +0100</pubDate>
        <link>http://natstar93.github.io//week5/2015/07/09/day-24.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week5/2015/07/09/day-24.html</guid>
        
        
        <category>week5</category>
        
      </item>
    
      <item>
        <title>Day 23 | AJAX.. but not then bathroom cleaner or the football team</title>
        <description>&lt;p&gt;This week has involved a couple of famililar topics in the shape of HTML and CSS, so I’ve been able to give myself a bit of time off in the evenings! I’ve been showing a couple of people how to make pages more presentable and more interesting by using animated gifs and jquery animation. Whilst a thermostat with a background that goes up in flames when the temperature gets too high might not be the best user experience, and I certainly wouldn’t show it to any designers I know, it has been quite fun as a break from intense tutorials and logic challenges.&lt;/p&gt;

&lt;p&gt;We rewrote our front end JavaScript in jQuery today which didn’t pose any problems, then moved on to working with AJAX calls to a weather API. The purpose of this was to display the weather in one or more locations.&lt;/p&gt;

&lt;p&gt;Here’s the main call we used to get the JSON file and display the bits we needed&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $.ajax({url: &quot;http://api.openweathermap.org/data/2.5/weather?q=London,uk&amp;amp;units=metric&quot;, success: function(result){
    $(&quot;#currentTemp&quot;).html(result.main.temp + &#39;°C&#39;);
    $(&quot;#city&quot;).html(result.name);
  }});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is how it works…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The API URL for London weather is pulled in&lt;/li&gt;
&lt;li&gt;If the loading of that data is a success the result (a JSON file) is passed into a function&lt;/li&gt;
&lt;li&gt;The temperature is found by navigating through the file using `result.main.temp`&lt;/li&gt;
&lt;li&gt;This temperature information is displayed inside the element with an ID of &#39;currentTemp&#39; (probably a div or paragraph)&lt;/li&gt;
&lt;li&gt;The name of the city is displayed in the same way&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We managed to get it working for multiple cities using a method that was executed upon the change of a select box, and inserted the value of the select option into the API URL.&lt;/p&gt;

&lt;p&gt;The day ended a bit early due to the tube strike, but I’m pretty happy with what we did today!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Jul 2015 22:03:39 +0100</pubDate>
        <link>http://natstar93.github.io//week5/2015/07/08/day-23.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week5/2015/07/08/day-23.html</guid>
        
        
        <category>week5</category>
        
      </item>
    
      <item>
        <title>Day 21 | Chitter chatter &amp; JavaScript</title>
        <description>&lt;p&gt;Hellooo week 5! We’re really in the thick of it now. In less than two weeks we will lose the ‘juniors’ label and be fast approaching our final projects. This is going way too quickly! I am having the time of my life and in a way I don’t want it to end. When I look back at what we’ve accomplished so far it does make me feel really proud of myself and everyone in my cohort.&lt;/p&gt;

&lt;p&gt;The weekend was pretty Makers oriented. I started the weekend challenge on Friday and worked on it for several hours each day, interspersing the work with various little outings (two of which involved Makers people!). As with the rest of the course it’s about finding a balance and I think this weekend I finally did that. Reading over my last blog post has reminded me that I wasn’t that confident I’d understood all of the material by Friday. Having now built Chitter - a clone of Twitter - without any major problems and in one weekend I can now see that the knowledge really did stick.&lt;/p&gt;

&lt;p&gt;Nicola hosted a dinner for the June ladies last night, which involved food, wine, chatter and er.. Chitter. Once dessert had been eaten the laptops were out and the lounge became bug fixing central. I implemented my last feature and tried to help identify some of the database and config issues people were having. I’m liking how collaborative our group has become, and a big part of that is down to our pairing experiences. It just seems so natural now to help each other out and discuss together what we’re doing to approach a problem.&lt;/p&gt;

&lt;p&gt;Today was the first day of JavaScript week which went really, really well. Having taught myself a lot of JS last year obviously helps, and I’m really enjoying expanding that knowledge and understanding everything so much better. Everyone who has experience with the language seems to be very excited about JavaScript. Apparently once you’ve seen past all the crazy brackets and let go of having a handy Ruby method for just about everything you embrace the amount of power and importance it has. People at Makers can often be overheard raving about Ember or the awesomeness of callbacks and I can’t wait to get more stuck into it. Today I learnt about functions as objects, used Jasmine, built a JavaBuzz game, did yoga, built a thermostat, and played tennis after dinner. I would say the week is off to a very good start :)&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Jul 2015 22:37:46 +0100</pubDate>
        <link>http://natstar93.github.io//week5/2015/07/06/day-21.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week5/2015/07/06/day-21.html</guid>
        
        
        <category>week5</category>
        
      </item>
    
      <item>
        <title>Day 20 | Week 4 learning plan</title>
        <description>&lt;p&gt;&lt;strong&gt;Most Important Things I Learned:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Lots of datamapper configuration details!&lt;br /&gt;
• Testing with databases using factory girl and database cleaner&lt;br /&gt;
• How passwords work&lt;br /&gt;
• How controllers should be organised (e.g. users/new structure as a convention for creating something, delete methods being called using hidden fields)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Things I Struggled With The Most:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• I was worried I didn’t fully understand the setup properly. Hopefully having done an athletic restart and the weekend challenge will give me more confidence with this&lt;br /&gt;
• DataMapper methods&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Changes I Plan to Make Next Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Go to bed earlier&lt;br /&gt;
• Complete weekend challenge earlier&lt;br /&gt;
• Spend evenings going over what I’ve learnt in the day instead of trying to do all of the extra bits of the last weekend challenge - I will save these for lab week&lt;br /&gt;
• Post on slack overflow more&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other Experiences or General Feedback This Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Really enjoying it! Confused about a few things as usual but I’m happy with the progress I made this week. I really can see the value in pairing with lots of different people now. Having a mix of people who like to get through things rapidly and people who like to talk through things and examine them in detail is a really great way to push yourself and learn loads.&lt;br /&gt;
• More fruit and breakfast please!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Jul 2015 13:27:13 +0100</pubDate>
        <link>http://natstar93.github.io//week4/2015/07/03/day-20.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week4/2015/07/03/day-20.html</guid>
        
        
        <category>week4</category>
        
      </item>
    
      <item>
        <title>Day 19 | Factory Girls working overtime</title>
        <description>&lt;p&gt;I had a great time today. Thursdays are fast becoming my favourite day of the week at Makers. We usually spend the first day or two of the week getting stuck into a new topic, Wednesday making some good progress and Thursday marvelling at the things we’re suddenly able to create.&lt;/p&gt;

&lt;p&gt;Elin and I started working through the material fairly slowly, wanting to examine and understand several details we thought were important to our learning. By the end of the day we were absolutely flying and had created password sign ups, authentications, a login function, error messages and refactored using a handy gem called &lt;a href=&quot;https://github.com/thoughtbot/factory_girl&quot;&gt;Factory Girl&lt;/a&gt;. This DRYs your code out by effectively creating massive doubles of objects such as users, complete with preset properties (e.g. email, password, password confirmation etc). Nine hours and &lt;a href=&quot;https://github.com/natstar93/bookmark-manager-en/commits/master&quot;&gt;12 commits&lt;/a&gt; later we had to call it a day as we were starting to get brain melt.&lt;/p&gt;

&lt;p&gt;After dinner I implemented a sign out function and used partials for the first time to tidy up my layout.&lt;/p&gt;

&lt;p&gt;We really have learned a lot this week. I sometimes think my brain must be forgetting some other important knowledge in order to make space..&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jul 2015 23:27:31 +0100</pubDate>
        <link>http://natstar93.github.io//week4/2015/07/02/day-19.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week4/2015/07/02/day-19.html</guid>
        
        
        <category>week4</category>
        
      </item>
    
      <item>
        <title>Day 18 | Salty hashes</title>
        <description>&lt;p&gt;Today we mainly focussed on implementing user sign ups and password security. It’s kind of scary building things that actually require a layer of security and I’m trying to pay extra attention to that element.&lt;/p&gt;

&lt;p&gt;I found out about how passwords are encrypted (or hashed), which was something I’d been wondering about for a while. Basically the password you enter is encrypted, then the resulting hash is stored in the database. The encryption algorithm used is mathematically impossible to crack. The bit I’d wondered about was the decryption of the hash to check it matched the password input, and whether this was a security risk. It turns out that the password is &lt;strong&gt;never actually decrypted&lt;/strong&gt;. Instead, the user’s input is encrypted using the same algorithm and compared to the stored encrypted password. If they match, you are logged in! If they don’t, the server and application don’t know which characters didn’t match, it just knows that they’re not exactly the same.&lt;/p&gt;

&lt;p&gt;A lot of people enter really lame passwords, such as ‘password’. It might be a clue to hackers that certain users are using common passwords if a lot of the hashes match each other. To get around this problem, passwords hashes can be ‘salted’ using a modification specific to that user. The salting algorithm is stored in the database alongside the user’s details. This doesn’t make the hash any easier to crack though, since once the hashes are salted they are all unique, so hackers have no idea which passwords match each other anymore.&lt;/p&gt;

&lt;p&gt;Today was very good. I had my 1:1 and got some helpful feedback about my rock, paper scissors game and pairing went well.&lt;/p&gt;

&lt;p&gt;It was 36*C today and I am very tired as a result of not sleeping properly, so I’d best call it a night now.&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jul 2015 00:03:31 +0100</pubDate>
        <link>http://natstar93.github.io//week4/2015/07/02/day-18.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week4/2015/07/02/day-18.html</guid>
        
        
        <category>week4</category>
        
      </item>
    
  </channel>
</rss>
