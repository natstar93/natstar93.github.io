<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Diary of a Developer</title>
    <description>A blog following my journey through Makers Academy and beyond...
</description>
    <link>http://natstar93.github.io//</link>
    <atom:link href="http://natstar93.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 03 Jan 2016 23:33:13 +0000</pubDate>
    <lastBuildDate>Sun, 03 Jan 2016 23:33:13 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>I love it when a plan goes completely wrong!</title>
        <description>&lt;p&gt;I’ve spent the last few days working through a MEAN tutorial I started months ago but never made that much progress on. I remember my poor pair partner David’s face when I exclaimed ‘oh, looks like I don’t have Node or Java installed on this laptop’ and the resulting 2 hours of installations and issues hampering our efforts to get to the &lt;a href=&quot;https://thinkster.io/mean-stack-tutorial#beginning-node&quot;&gt;interesting bit&lt;/a&gt;. It never really got off the ground. Having to redo the angular bits of the tutorial and ugh… the basic styling section, was a bit soul-destroying but at least it was over quickly. Like a bad nightmare. Happily, I’ve now moved on to the part where you get to play around with databases (fun) and the node/express/routing/debugging part (vaguely relevant to my job AND fun).&lt;/p&gt;

&lt;p&gt;I had forgotten databases could be a lot of fun. I even laughed once when Zeina was reminiscing about a particular week at Makers and merrily concluded ‘and that was when I realised I loved databases’. Mongo is a pretty simple non-relational database and I’m pretty sure its simplicity will lead me to use it in projects in the future. I nearly wrote ‘hackatons in the future’ there but then remembered that hackathons usually involve pretending you have a database and not just a crappy JSON file you’ve faked and that the judges will &lt;strong&gt;never ever see&lt;/strong&gt;. Anyway… I’ve now got the models, a little database that stores Posts and their related Comments and uses a couple of little database methods to increment upvotes on each when told to do so. I’m using Node and Express for the routing and associated error handling and have been finding about some new javascript methods and parameters… (see last section)&lt;/p&gt;

&lt;p&gt;The best thing about this tutorial has been the debugging side of things. It’s easy to zone out and become demotivated when typing out the lines of code the tutorial tells you to type. But then.. occasionally you make a mistake or misinterpret something. You dive into the database and realise that it doesn’t look like it should, or you run npm start and the app crashes. Bring on stack traces, stack overflows, console.log() here there and everywhere and setting up some extra routes in order to work out what’s going on. Suddenly you’re actually thinking and manipulating stuff to do what you need it to do, and celebrating when you work each little problem out with increasing ease. Happily, I now get to do this kind of stuff EVERY DAY at work, just with a little more pressure to make sure I a) get things done fairly quickly and b) don’t commit something stupid to the master branch of a real site.&lt;/p&gt;

&lt;p&gt;I restarted this tutorial with the aim of redoing the front end in React, which I’ll be using more and more in my job this year. Once I’ve cracked that, I’m hoping to think up a new React+Node+Mongo project to completely test drive. Happy days.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stuff I have learnt by doing this tutorial&lt;/strong&gt; (Enough waffle, get to the technical bit)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;next &lt;em&gt;- (parameter)&lt;/em&gt;&lt;br /&gt;
Explained &lt;a href=&quot;http://stackoverflow.com/questions/10695629/what-is-the-parameter-next-used-for-in-express/10695714&quot;&gt;here&lt;/a&gt; but it is an extra parameter passed in addition to the usual response and request params. It is used to call the next middleware function in the request response cycle, so it’s sort of a callback. You can use it to control flow by breaking out of the code in your route based on whether the condition you’re looking at is satisfied or causes an error. In my code below you can see that next is used to break out and take the error details with it.&lt;/p&gt;

    &lt;p&gt;router.get(‘/posts/:post/comments’, (req, res, next) =&amp;gt; {
    Comment.find((err, comments) =&amp;gt; {
      if(err) { return next(err); }
      res.json(comments);
    });
  });&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;exec() method&lt;br /&gt;
The exec() method tests for a match in a string. It returns the matched text if it finds a match, otherwise it returns null. Shove this into your console:&lt;/p&gt;

    &lt;p&gt;var str = ‘Hi Nat’;
  patt = /Hi/g;
  patt.exec(str);&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should get back an array containing the matched text as a string. If you change the regex to something that’s not in the string you should get back null. Cool huh?&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jan 2016 21:38:28 +0000</pubDate>
        <link>http://natstar93.github.io//node/2016/01/03/MEAN.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//node/2016/01/03/MEAN.html</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>New years resolutions</title>
        <description>&lt;ul&gt;
  &lt;li&gt;Blog more&lt;/li&gt;
  &lt;li&gt;Mentor at Codebar&lt;/li&gt;
  &lt;li&gt;Attend meetups that provide pizza, beer and JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jan 2016 21:38:28 +0000</pubDate>
        <link>http://natstar93.github.io//2016/01/01/New-year.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//2016/01/01/New-year.html</guid>
        
        
      </item>
    
      <item>
        <title>Node Streams</title>
        <description>&lt;p&gt;Streams are a way of inputting and outputting data. They can be readable or writable (or both) and can be paused and resumed.&lt;/p&gt;

&lt;p&gt;Using the filesystem module we just saw, we can create a stream to read data as below. The data is read in in chunks, so the readStream on data event event is fired multiple times. A counter has been implemented which increments each time another chunk of data is received.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fs = require(&#39;fs&#39;);

var readStream = fs.createReadStream(&#39;lorem.txt&#39;);
readStream.setEncoding(&#39;utf8&#39;);

var counter = 0;

readStream.on(&#39;data&#39;, function(myData) {
  counter ++;
});

readStream.on(&#39;end&#39;, function() {
  console.log(counter);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another event listener is listening for a signal that the data has finished being read, and at this point it outputs the value of the counter variable to the console. You can therefore see how many chunks the data was streamed in.&lt;/p&gt;

&lt;p&gt;Write streams can be created as below&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var writeStream = fs.createWriteStream(&#39;copylorem.txt&#39;);

writeStream.write(&#39;Hello world&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some other useful commands you might like to use with streaming are&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;readStream.pipe(writeStream); // to pipe the data read in straight into the write stream

readStream.pause(); // pauses the reading of the stream
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Oct 2015 20:14:52 +0100</pubDate>
        <link>http://natstar93.github.io//node/2015/10/18/Node_streams.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//node/2015/10/18/Node_streams.html</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>Node fs Module</title>
        <description>&lt;p&gt;File System (fs) is a very useful module that comes with the node installation by default. It can be used to read and write data from the file system on your computer.&lt;/p&gt;

&lt;p&gt;Below is an example of how it can be used in an asynchronous way. Note the use of ‘utf8’ as a parameter. Node uses a datatype called buffer which represents data in binary. We need the data converted to utf-8 encoding for it to be interpreted properly, so that’s why ‘utf8’ need to be passed in as the encoding parameter. Try running the below without the encoding parameter and your text file will be represented as something like &amp;lt;Buffer 34 92 57 6c 6f 62&amp;gt; instead of nice normal text.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fs = require(&#39;fs&#39;);

fs.readFile(&#39;text.txt&#39;, &#39;utf8&#39;, function(err, data) {
  if(err) {
    console.log(err.code);
  }
  console.log(data);
});

fs.writeFile(&#39;text2.txt&#39;, &#39;some text&#39;, &#39;utf8&#39;, function(err, data) {
  if(err) {console.log(err)}
  console.log(data);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think the above is quite self explanatory as far as explaining how the fs methods readFile and writeFile work, now that we know all about callbacks and asynchronous stuff.&lt;/p&gt;

&lt;p&gt;Here’s an example of a synchronous way of doing the same thing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fs = require(&#39;fs&#39;);

var myRead = fs.readFileSync(&#39;text.txt&#39;, &#39;utf8&#39;);
console.log(myRead);

var myWrite = fs.writeFileSync(&#39;text2.txt&#39;, &#39;text here&#39;, &#39;utf8&#39;);
console.log(myWrite);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, that wasn’t too hard. I think we’re ready for &lt;a href=&quot;../18/Node_streams.html&quot;&gt;streams&lt;/a&gt; now.&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Oct 2015 13:31:45 +0100</pubDate>
        <link>http://natstar93.github.io//node/2015/10/17/Node_fs.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//node/2015/10/17/Node_fs.html</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>Node Events</title>
        <description>&lt;p&gt;Callbacks are great, but when there are more than two events and/or they need to be called multiple times, events are used. They’re more flexible and more powerful… Plus you can kind of switch them on and off as you please.&lt;/p&gt;

&lt;p&gt;Instead of using asynchronous functions which execute upon the return of a result, a number of event listeners are set up to watch for certain signals or state changes. These listeners are also known as Observers. Node.js has a module called ‘events’ which needs to be required in order for this all to work.&lt;/p&gt;

&lt;p&gt;Here’s an example of event handlers and emitters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var events = require(&#39;events&#39;);
var eventEmitter = new events.EventEmitter();

var myFirstEventHandler = function first() {
  console.log(&#39;First event handler fired&#39;);
}

eventEmitter.on(&#39;firstEvent&#39;, myFirstEventHandler);

eventEmitter.emit(&#39;firstEvent&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run that with node and see what happens…&lt;/p&gt;

&lt;p&gt;Also, check out what gets returned here if you type each line into a REPL environment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; eventEmitter.on(&#39;firstEvent&#39;, myFirstEventHandler);

{ domain: null,
  _events: { firstEvent: [Function: first] },
  _maxListeners: 10 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The event emitter is returned, so this can be used for chaining calls together.&lt;/p&gt;

&lt;p&gt;Event listeners can be added and removed from the array of event listeners using methods such as &lt;code&gt;eventEmitter.addListener(event, listener)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s an example of removeAllListeners in use.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(counter === 15) {
  readStream.removeAllListeners(&#39;data&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a full list please see the &lt;a href=&quot;https://nodejs.org/api/events.html&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next up, the &lt;a href=&quot;../17/Node_fs.html&quot;&gt;file system module&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Oct 2015 18:31:45 +0100</pubDate>
        <link>http://natstar93.github.io//node/2015/10/16/Node_Events.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//node/2015/10/16/Node_Events.html</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>The wonderful world of Node</title>
        <description>&lt;p&gt;I’ve been having a lot of fun learning about Node.js this week. I’m excited to be finally working with JavaScript on the server side, after doing quite a lot of &lt;a href=&quot;https://github.com/natstar93/clothing_shop&quot; target=&quot;blank&quot;&gt;JavaScript things on the front end recently&lt;/a&gt;. (Blog post on React.js coming soon too).&lt;/p&gt;

&lt;h2 id=&quot;so-what-is-nodejs&quot;&gt;So, what is Node.js?&lt;/h2&gt;

&lt;p&gt;It’s a cross-platform runtime environment for developing server-side web applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What the hell does that mean?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Every language has a runtime environment that runs the language and processes it. You might have had to download or update your Java environment in the past, for example, in order to run a certain program. That would have been because something you were running was written in Java. Your computer needed to update your out-of-date/non-existent Java runtime environment in order to interpret and process the Java code in that program.&lt;/p&gt;

&lt;p&gt;JavaScript was originally developed for use in the browser, rather than for the server side, so its runtime environment came a bit late to the party. A few options were developed but Node.js proved to be the most popular because it was the fastest and processed things in the most efficient way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why is Node.js faster and more efficient?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Node.js is a single threaded application which means it processes one command at a time. It uses events and callbacks in a ‘non-blocking’ way to achieve concurrency of processes. This will all be explained below… but basically it means it can do a lot of things at once despite being quite lightweight.&lt;/p&gt;

&lt;h3 id=&quot;callbacks&quot;&gt;Callbacks&lt;/h3&gt;

&lt;p&gt;It’s worth mentioning callbacks here since I don’t think I’ve written about them previously. Callback functions are executed at the end of a given task. They’re useful as they mean that the program can go off and do something else in the meantime, and when the first task has been completed the program receives a signal that task 1 has delivered the required output and is ready to execute the next part using that output. This kind of setup is known as a non-blocking model.&lt;/p&gt;

&lt;h4 id=&quot;example-of-blocking&quot;&gt;Example of Blocking&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var fs = require(&#39;fs&#39;);
var data = fs.readFileSync(&#39;nat.txt&#39;)

console.log(data.toString());
console.log(&#39;Something else&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; Whatever stupid data is in my file
&amp;gt; Something else
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example the data file will be read and the result outputted, then after all that’s done the program will move on to the second console.log and output the string ‘Something else’. So the program has to wait for the first command to be completely executed before it handles something else, even if that first command is waiting for something external. Hmm, doesn’t sound too efficient.&lt;/p&gt;

&lt;h4 id=&quot;example-of-non-blocking-using-callbacks&quot;&gt;Example of Non-Blocking, using callbacks&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var fs = require(&#39;fs&#39;);

var data = fs.readFileSync(&#39;nat.txt&#39;, function (error, data) {
  if (error) return console.log(&#39;error&#39;);
  console.log(data.toString());
});

console.log(&#39;Something else&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; Something else
&amp;gt; Whatever stupid data is in my file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example the string ‘Something else’ will actually be outputted first, while the program is waiting for the data to all be read in from the nat.txt file. Once the data has been read it will be logged. If the data file cannot be read, an error object is passed back so you can log an error message instead.&lt;/p&gt;

&lt;p&gt;So, yaaay for callbacks. Lets move onto &lt;a href=&quot;../16/Node_Events.html&quot;&gt;Events&lt;/a&gt; next…&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Oct 2015 01:31:45 +0100</pubDate>
        <link>http://natstar93.github.io//node/2015/10/15/NodeJS.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//node/2015/10/15/NodeJS.html</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>Day 55 | Thanks for the memories</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://www.natalie-akam.com/Blog/images/group_pic.jpg&quot; /&gt;
&lt;strong&gt;16 of the 24 amazing people I spent my summer with&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am feeling a mixture of emotions today. June 2015 have now officially graduated and I’m so immensely proud of what all the groups produced for their final projects and of the journey we had together. All six groups’ presentations went without a hitch and we proved that together we can create some amazing things and overcome all sorts of barriers to get there. Graduation night was a huge celebration of our achievements and of the fun we’ve had in the last 11 weeks with our cohort and the fantastic staff.&lt;/p&gt;

&lt;p&gt;I haven’t blogged this week due to obvious time constraints, but our project really started to come together from Sunday onwards and in the end we somehow created with something bigger and better than we expected, and it looked beautiful too. At times I was so exhausted but it was all worth it in the end. After two frankly horrendous practice presentations on Friday, each team member put their all into making their part the best they could, and when we came off stage we were all riding a wave of elation. Seeing each member of your beloved cohort absolutely rock it too just puts the icing on the cake!&lt;/p&gt;

&lt;p&gt;These times are tinged with immense sadness too though. We had to say goodbye to Jack (aka Captain America, aka the guy who brought the party to Makers Academy) at the end of the night as he left for his flight home. There will no doubt be a couple more tearful goodbyes in coming weeks too, which I’m not looking forward to. Jack’s departure signals the start of the disbandment of a very special group who were complete strangers 11 weeks ago but have now experienced so many laughs, lows and so much love for each other. I’ve had such an amazing summer and it’s so sad to know that this part of the journey has come to an end so quickly. Some great friendships have been formed and I’m sure we’ll all keep in contact even when we’re all out in the world doing various awesome things.&lt;/p&gt;

&lt;p&gt;Due to the strength of the ever expanding Makers alumni network it seems a lot of alumni end up working together, collaborating on things and even forming startups, so in a way this is not the end. Most of us will be back in for hiring week next week too, which we’ve been warned is very hard work (just carrying on as normal then, really!). A record number of hiring companies are coming in to present to us with the aim of plucking us from the Makers Academy nest to become the awesome developers we now know we can be.&lt;/p&gt;

&lt;p&gt;If anyone reading this is weighing up whether to apply or not, I would say a massive, massive 100% YES! Quit your boring job, throw yourself into it and never look back. I would live it all again in a heartbeat.&lt;/p&gt;

&lt;p&gt;And so ends… the best summer of my life.&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Aug 2015 20:18:45 +0100</pubDate>
        <link>http://natstar93.github.io//week11/2015/08/21/day-55.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week11/2015/08/21/day-55.html</guid>
        
        
        <category>week11</category>
        
      </item>
    
      <item>
        <title>Day 50 | Final Project week 1 summary</title>
        <description>&lt;p&gt;It’s been a funny old week. The reason these blog posts are getting so few and far between is that I am spending every waking moment planning, coding, testing, researching or at the very least thinking about this project.&lt;/p&gt;

&lt;p&gt;We’ve had a number of setbacks already, all so different from the technical and version control issues experienced in previous projects. Team communication has not been fantastic for various reasons and a couple of other unexpected situations had to be dealt with. These elements are definitely so much harder than writing the actual code! However we’re not delivering work for a client here, we’re having a learning experience, so the best thing to do is to suck it up and do the best we can with whatever dire situation we’re presented with! The challenge is really to deal with whichever problems arise and deliver something that works despite them, not attempt to create the next Facebook in under two weeks. I find myself considering Dana’s attitude and general outlook a lot, as she really does have the right idea. In her yoga classes she talks a lot about being kind and forgiving with ourselves, and sort of encourages us to see positives rather than the negatives.&lt;/p&gt;

&lt;p&gt;All things considered, I think we have got a reasonable collection of work together so far. The MVP may be looking very tiny but a lot of really good research has been done and I feel like once I sit down and pair with someone on building and test-driving more of the essential functionality we’ll be fairly pleased with what we’ve got! Then it will be a case of adding a couple of the features we have on our rather long list, based on which we think are the most achievable or appropriate. I hope we have faced most of the technical issues now, but I’m mentally preparing for some long nights ahead if not!&lt;/p&gt;

&lt;p&gt;I’m enjoying Ionic a lot now. It uses Angular, which I love getting stuck into even when it means I spend my whole evening trying to bug fix. I learnt a lot about controllers and services this week, particularly that controllers operating across muliple views are not singletons, i.e. a new instance will be created for each view. So basically don’t try to share data using them like I did. That’s not really the role of an angular controller anyway, the job far better suited to a service (which is a singleton). We’ll try and smash out a test-driven working product by the end of the weekend and see what next week brings!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Aug 2015 20:22:34 +0100</pubDate>
        <link>http://natstar93.github.io//week10/2015/08/14/day-50.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week10/2015/08/14/day-50.html</guid>
        
        
        <category>week10</category>
        
      </item>
    
      <item>
        <title>Day 47 | Issue central</title>
        <description>&lt;p&gt;All hell has broken loose. We’ve now started our final projects.&lt;/p&gt;

&lt;p&gt;Day 1 was pretty much a disaster. Based on our initial discussions and research, not knowing if one team member was in or out and a general lack of excitement about the project theme we decided to completely change our project idea. It was good that these misgivings were out in the open early, and the win for the day was that when we left we had an idea we were excited about working on. However there was a lot of uncertainty about how many team members we would have and therefore how much be could plan to achieve. Plus if we were to be a four, would the fourth member be happy to work on the new idea? Not a good start.&lt;/p&gt;

&lt;p&gt;We decided to create a smartphone app for children that’s based around the idea of an &lt;a href=&quot;https://en.wikipedia.org/wiki/I-Spy_(Michelin)&quot;&gt;iSpy book&lt;/a&gt; for the digital youth of today. It’s aimed at tourists or daytrippers who have children with them and want to give them a fun, educational, game-based activity to do to prevent them getting cranky and ruining the whole outing. I think the idea has a lot of potential and it’s interesting to be creating something for a different target market and on a mobile platform too.&lt;/p&gt;

&lt;p&gt;Days 1-3 are research, prototyping and design days. We’re looking at Ionic and Cordova as our potential tools and I’ve been experimenting with a plugin that accesses the iPhone/Android camera. It’s quite satisfying when it works, but terrible to debug since you actually have to upload the app to your phone to test the camera function, so there goes the option of using your usual debugging tools e.g. the blimmin console. David and I have been debugging by outputting objects and values all over the shop, to try and keep a track of what’s doing what without a console. Natalia has used her Photoshop skills to create a design for the main view, which looks pretty amazing. We’re back to a four now but we’re a bit all over the place in terms of who’s doing what and crucially whether everyone is on the same page after our slightly unstructured discussions. Some things we disuss in detail seem to emerge completely different to what I thought had been agreed. This stuff is really hard. I’m nervous about whether we can pull this project off, but if we do it will be a very satisfying achievement.&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Aug 2015 00:44:05 +0100</pubDate>
        <link>http://natstar93.github.io//week10/2015/08/12/day-47.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week10/2015/08/12/day-47.html</guid>
        
        
        <category>week10</category>
        
      </item>
    
      <item>
        <title>Day 45 | Week 9 learning plan</title>
        <description>&lt;p&gt;&lt;strong&gt;Most Important Things I Learned:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Good communication in the most important thing in group project work&lt;br /&gt;
• It’s often better to implement a sub-optimum solution to a difficult problem (e.g. database associations) and then let it lead you to a better solution to the same problem&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Things I Struggled With The Most:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Keeping track of what the 3 different pairs were doing and working out whether the constituent parts of the product were going to work together&lt;br /&gt;
• Github.. merge conflicts, branches being accidentally merged into Master and rolling back commits&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Changes I Plan to Make Next Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Make sure everyone is clear on the Git process from day 1, and is using Waffle in the correct way. Ask for guidance if things like pull requests not closing the right issues occur again and document the process.&lt;br /&gt;
• Regular stand ups at the same time every day. Nominating a leader for each stand up so they are more structured and useful&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other Experiences or General Feedback This Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Looking forward to final projects and hoping we can make something awesome!&lt;br /&gt;
• It was great having a much needed no-homework weekend! Thanks :) Think it’s a good idea to have this before we immerse ourselves in final projects.&lt;br /&gt;
• I’ve decided to write more ‘how to’ blog posts as they are proving useful for myself and other to refer back to&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Aug 2015 12:21:23 +0100</pubDate>
        <link>http://natstar93.github.io//week9/2015/08/07/day-45.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week9/2015/08/07/day-45.html</guid>
        
        
        <category>week9</category>
        
      </item>
    
  </channel>
</rss>
