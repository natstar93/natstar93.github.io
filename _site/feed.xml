<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Diary of a Developer</title>
    <description>A blog following my journey through Makers Academy and beyond...
</description>
    <link>http://natstar93.github.io//</link>
    <atom:link href="http://natstar93.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 06 Jul 2015 22:51:17 +0100</pubDate>
    <lastBuildDate>Mon, 06 Jul 2015 22:51:17 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Day 21 | Chitter chatter &amp; JavaScript</title>
        <description>&lt;p&gt;Hellooo week 5! We’re really in the thick of it now. In less than two weeks we will lose the ‘juniors’ label and be fast approaching our final projects. This is going way too quickly! I am having the time of my life and in a way I don’t want it to end. When I look back at what we’ve accomplished so far it does make me feel really proud of myself and everyone in my cohort.&lt;/p&gt;

&lt;p&gt;The weekend was pretty Makers oriented. I started the weekend challenge on Friday and worked on it for several hours each day, interspersing the work with various little outings (two of which involved Makers people!). As with the rest of the course it’s about finding a balance and I think this weekend I finally did that. Reading over my last blog post has reminded me that I wasn’t that confident I’d understood all of the material by Friday. Having now built Chitter - a clone of Twitter - without any major problems and in one weekend I can now see that the knowledge really did stick.&lt;/p&gt;

&lt;p&gt;Nicola hosted a dinner for the June ladies last night, which involved food, wine, chatter and er.. Chitter. Once dessert had been eaten the laptops were out and the lounge became bug fixing central. I implemented my last feature and tried to help identify some of the database and config issues people were having. I’m liking how collaborative our group has become, and a big part of that is down to our pairing experiences. It just seems so natural now to help each other out and discuss together what we’re doing to approach a problem.&lt;/p&gt;

&lt;p&gt;Today was the first day of JavaScript week which went really, really well. Having taught myself a lot of JS last year obviously helps, and I’m really enjoying expanding that knowledge and understanding everything so much better. Everyone who has experience with the language seems to be very excited about JavaScript. Apparently once you’ve seen past all the crazy brackets and let go of having a handy Ruby method for just about everything you embrace the amount of power and importance it has. People at Makers can often be overheard raving about Ember or the awesomeness of callbacks and I can’t wait to get more stuck into it. Today I learnt about functions as objects, used Jasmine, built a JavaBuzz game, did yoga, built a thermostat, and played tennis after dinner. I would say the week is off to a very good start :)&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Jul 2015 22:37:46 +0100</pubDate>
        <link>http://natstar93.github.io//week5/2015/07/06/day-21.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week5/2015/07/06/day-21.html</guid>
        
        
        <category>week5</category>
        
      </item>
    
      <item>
        <title>Day 20 | Week 4 learning plan</title>
        <description>&lt;p&gt;&lt;strong&gt;Most Important Things I Learned:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Lots of datamapper configuration details!&lt;br /&gt;
• Testing with databases using factory girl and database cleaner&lt;br /&gt;
• How passwords work&lt;br /&gt;
• How controllers should be organised (e.g. users/new structure as a convention for creating something, delete methods being called using hidden fields)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Things I Struggled With The Most:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• I was worried I didn’t fully understand the setup properly. Hopefully having done an athletic restart and the weekend challenge will give me more confidence with this&lt;br /&gt;
• DataMapper methods&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Changes I Plan to Make Next Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Go to bed earlier&lt;br /&gt;
• Complete weekend challenge earlier&lt;br /&gt;
• Spend evenings going over what I’ve learnt in the day instead of trying to do all of the extra bits of the last weekend challenge - I will save these for lab week&lt;br /&gt;
• Post on slack overflow more&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other Experiences or General Feedback This Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Really enjoying it! Confused about a few things as usual but I’m happy with the progress I made this week. I really can see the value in pairing with lots of different people now. Having a mix of people who like to get through things rapidly and people who like to talk through things and examine them in detail is a really great way to push yourself and learn loads.&lt;br /&gt;
• More fruit and breakfast please!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Jul 2015 13:27:13 +0100</pubDate>
        <link>http://natstar93.github.io//week4/2015/07/03/day-20.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week4/2015/07/03/day-20.html</guid>
        
        
        <category>week4</category>
        
      </item>
    
      <item>
        <title>Day 19 | Factory Girls working overtime</title>
        <description>&lt;p&gt;I had a great time today. Thursdays are fast becoming my favourite day of the week at Makers. We usually spend the first day or two of the week getting stuck into a new topic, Wednesday making some good progress and Thursday marvelling at the things we’re suddenly able to create.&lt;/p&gt;

&lt;p&gt;Elin and I started working through the material fairly slowly, wanting to examine and understand several details we thought were important to our learning. By the end of the day we were absolutely flying and had created password sign ups, authentications, a login function, error messages and refactored using a handy gem called &lt;a href=&quot;https://github.com/thoughtbot/factory_girl&quot;&gt;Factory Girl&lt;/a&gt;. This DRYs your code out by effectively creating massive doubles of objects such as users, complete with preset properties (e.g. email, password, password confirmation etc). Nine hours and &lt;a href=&quot;https://github.com/natstar93/bookmark-manager-en/commits/master&quot;&gt;12 commits&lt;/a&gt; later we had to call it a day as we were starting to get brain melt.&lt;/p&gt;

&lt;p&gt;After dinner I implemented a sign out function and used partials for the first time to tidy up my layout.&lt;/p&gt;

&lt;p&gt;We really have learned a lot this week. I sometimes think my brain must be forgetting some other important knowledge in order to make space..&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jul 2015 23:27:31 +0100</pubDate>
        <link>http://natstar93.github.io//week4/2015/07/02/day-19.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week4/2015/07/02/day-19.html</guid>
        
        
        <category>week4</category>
        
      </item>
    
      <item>
        <title>Day 18 | Salty hashes</title>
        <description>&lt;p&gt;Today we mainly focussed on implementing user sign ups and password security. It’s kind of scary building things that actually require a layer of security and I’m trying to pay extra attention to that element.&lt;/p&gt;

&lt;p&gt;I found out about how passwords are encrypted (or hashed), which was something I’d been wondering about for a while. Basically the password you enter is encrypted, then the resulting hash is stored in the database. The encryption algorithm used is mathematically impossible to crack. The bit I’d wondered about was the decryption of the hash to check it matched the password input, and whether this was a security risk. It turns out that the password is &lt;strong&gt;never actually decrypted&lt;/strong&gt;. Instead, the user’s input is encrypted using the same algorithm and compared to the stored encrypted password. If they match, you are logged in! If they don’t, the server and application don’t know which characters didn’t match, it just knows that they’re not exactly the same.&lt;/p&gt;

&lt;p&gt;A lot of people enter really lame passwords, such as ‘password’. It might be a clue to hackers that certain users are using common passwords if a lot of the hashes match each other. To get around this problem, passwords hashes can be ‘salted’ using a modification specific to that user. The salting algorithm is stored in the database alongside the user’s details. This doesn’t make the hash any easier to crack though, since once the hashes are salted they are all unique, so hackers have no idea which passwords match each other anymore.&lt;/p&gt;

&lt;p&gt;Today was very good. I had my 1:1 and got some helpful feedback about my rock, paper scissors game and pairing went well.&lt;/p&gt;

&lt;p&gt;It was 36*C today and I am very tired as a result of not sleeping properly, so I’d best call it a night now.&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jul 2015 00:03:31 +0100</pubDate>
        <link>http://natstar93.github.io//week4/2015/07/02/day-18.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week4/2015/07/02/day-18.html</guid>
        
        
        <category>week4</category>
        
      </item>
    
      <item>
        <title>Day 17 | Building a real thing</title>
        <description>&lt;p&gt;This week I was excited to start learning about databases. The last two days have been spent getting to grips with the setup and using Heroku, a super awesome tool that takes about 2 minutes to set up and gets your app online just as quickly.&lt;/p&gt;

&lt;p&gt;Having used a bit of SQL previously has helped a lot less than I thought it would so far. We’re more interested in the way DataMapper works with the regular Ruby files we build and the methods it provides to negate actually using SQL. Working through requiring files (simple translation: getting files to look at each other) and making sure settings are correct has been a bit of a minefield. An athletic restart (transalation: delete it and do it all again) was in order to make sure I could actually reproduce the setup.&lt;/p&gt;

&lt;p&gt;The whole project is being built using the BDD method we know and love, and the tutorials actually lead us to make certain errors and then work out how to fix them. To say it’s quite challenging would be quite an accurate statement.&lt;/p&gt;

&lt;p&gt;I’m pleased I know the roles of test, dev and prod databases and how to implement them into the various bits of my project. Those words were bandied about a lot in my old office but I never really knew what they meant exactly. Luckily Makers Academy have a ‘there are no stupid questions’ policy… Prod databases are the real life working databases. Test databases are usually a copy of the prod database and can be used when running rpsec tests on code. Dev databases are what you use when you’re developing the product. So if you’re a bank you can continue using your prod database, try out your new code on the dev database and then check it works on test before unleashing your changes on the public.&lt;/p&gt;

&lt;p&gt;Here are some cool things I’ve been using. Stop reading now if you’re not a fellow fan of code, you’ll just fall asleep otherwise.&lt;/p&gt;

&lt;p&gt;This statement checks whether you’ve got an environmental variable called RACK_ENV (for testing), and if not concludes that env should be set to development. This happens because ENV[‘RACK_ENV’] returns nil, so the right hand side of the ‘or’ statement is returned.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;env = ENV[&#39;RACK_ENV&#39;] || &#39;development&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The ‘or’ operator used below then checks whether a prod database URL exists, and if not uses a local server (either test or dev, depending on the result of the above variable assignment) as an argument for the DataMapper setup method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DataMapper.setup(:default, ENV[&#39;DATABASE_URL&#39;] || &quot;postgres://localhost/bookmark_manager_#{env}&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty clever, right?&lt;/p&gt;

&lt;p&gt;I’ve also been using a lovely gem called database cleaner which uses the following code to clean up your database between tests so you can ensure the run of one test isn’t affecting that of another.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; config.before(:suite) do
    DatabaseCleaner.strategy = :transaction
    DatabaseCleaner.clean_with(:truncation)
  end

  config.before(:each) do
    DatabaseCleaner.start
  end

  config.after(:each) do
    DatabaseCleaner.clean
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we’re nearly able to build a really cool product! Looking forward to making some more progress on it tomorrow.&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Jun 2015 22:34:23 +0100</pubDate>
        <link>http://natstar93.github.io//week4/2015/06/30/day-17.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week4/2015/06/30/day-17.html</guid>
        
        
        <category>week4</category>
        
      </item>
    
      <item>
        <title>Day 16 | Bad idea bears like fun</title>
        <description>&lt;p&gt;I spent the weekend having a lovely time in Copenhagen. The only non-lovely thing about it was that I spent several hours on a plane home that was going nowhere with no wifi or place to charge my laptop. Unable to look anything up, I fought my way through the first half of the challenge trying not to have a panic attack every time I noticed the status of my ever decreasing battery. Unsurprisingly, this greatly impacted my ability to do the weekend challenge. I’m not trying to make excuses, it’s totally my own fault for having time away, but I’ve realised over the last few weeks that social events really have to take a backseat if I’m going to do the best I can. The seniors who are 6 weeks ahead of us have started their final projects, a fact that has lead the June cohort to collectively and metaphorically soil itself.&lt;/p&gt;

&lt;p&gt;I did the rest of the work when I got home, the next morning and this evening and now have a 1 player working rock, paper scissors web app (harder than it sounds). I’ve also completed part of the ‘extra work’ involving setting up a 2 player game using multiple sessions. So all in all it didn’t go too badly in the end.&lt;/p&gt;

&lt;p&gt;Now to get my brain fully involved in the wonderful world of databases and make up for lost time!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Jun 2015 00:47:13 +0100</pubDate>
        <link>http://natstar93.github.io//week4/2015/06/27/day-16.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week4/2015/06/27/day-16.html</guid>
        
        
        <category>week4</category>
        
      </item>
    
      <item>
        <title>Day 15 | Friday learning plan</title>
        <description>&lt;p&gt;&lt;strong&gt;Most Important Things I Learned:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• How the internet works!&lt;br /&gt;
• How to use BDD, controllers, views and sessions&lt;br /&gt;
• Debugging is awesome. The alumni helpers helped me a lot with this and I’m now a lot more able to identify the cause of issues myself. I’m really happy about how this week went, I definitely found it easier than last week.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Things I Struggled With The Most:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Being ok with moving through the first stages slowly, but I’m glad I did because it really helped me understand everything well and probably helped me progress through the later stuff a bit more rapidly&lt;br /&gt;
• Listening to talks. I don’t know if there’s something wrong with me but after a certain amount of time I find it hard to listen if it’s not related to what I’m doing at that exact time&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Changes I Plan to Make Next Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Not really a change, but persevere as I did this week and keep making sure that both members of a pair are at the same level of understanding about a various topic before progressing onto the next bit of code&lt;br /&gt;
• Make time for yoga!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other Experiences or General Feedback This Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• I quite liked being able to choose pair partners.. I’m not sure how other people feel about this but I enjoyed partnering with someone who was at the same stage of the program and going through all the issues together for the first time at the same pace. I feel like maybe I learnt more that way? Maybe it’s just that this week wasn’t as hard as week 2. You could argue that having random pairings allows more opportunity for people to explain things though. Hmm.&lt;br /&gt;
• I LOVED the game we played in our standup (http://natstar93.github.io/week3/2015/06/23/day-12.html). I feel like I will now retain that info forever&lt;br /&gt;
• Can we have more cereal, bread, milk and fruit on fridays? :)&lt;br /&gt;
• I would prefer if the challenge came out earlier on a Friday. I occassionally have some unavoidable weekend plans (weddings etc) and it would be great to get a good start on it before Friday lunchtime and all the afternoon talks, sessions and er.. beers being handed round&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Jun 2015 13:14:47 +0100</pubDate>
        <link>http://natstar93.github.io//week3/2015/06/26/day-15.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week3/2015/06/26/day-15.html</guid>
        
        
        <category>week3</category>
        
      </item>
    
      <item>
        <title>Day 14 | Why is my test like an NHS ward? It&#39;s full of bugs</title>
        <description>&lt;p&gt;Today was another great day. Kate and I were super excited to combine forces and create a game which allowed the placement &lt;em&gt;and&lt;/em&gt; striking of battleships. That probably doesn’t sound very exciting but every little win not only resulted in tests going green and passing, we could see our results visually on the local server too. Ok, it probably still doesn’t sound very exciting. I guess it just depends on what you’re into.&lt;/p&gt;

&lt;p&gt;Some real progress was made today and we learnt a load of new stuff about cookies and error handling. Everything is really starting to come together. We managed to implement a multiplayer game and played it using two browsers that each took a cookie to keep track of which browser was being used by which player.&lt;/p&gt;

&lt;p&gt;Our joy at the above successes was marred slightly by our test still not passing. I spent the evening trying to work out why and had a bit of remote help from Mihai, an member of the awesome Makers alumni.&lt;/p&gt;

&lt;p&gt;I’ve learnt so much about debugging in the last few days I’m starting to embrace these problems. I wouldn’t say I exactly enjoy seeing error messages, but now I have more ideas on how to go about trying to identify issues and fix them, which is very satisfying. I don’t spend so much time feeling annoyed and scratching my head whilst looking at the error messages, hoping they’ll go away. Following BDD ensures that the problems are small and managable too. If you do it correctly and rigourously you can be quite confident your problem originates from the part you’ve just implemented, not something you should have tested earlier.&lt;/p&gt;

&lt;p&gt;Mihai identified that the problem was definitely with the testing, not the code, and told me how to run just the failing test on its own. I did just that and it went green at last! This prompt lead me to realise that one or more other tests must be interfering, i.e. it/they had set something that needed to be reset before any other tests were initialised. This is a bit of a breakthrough. I haven’t fixed the issue yet (will save that for tomorrow when Kate is there), but the more important outcome is that I know WHY the problem is happening and what approach we need to take to rectify it.&lt;/p&gt;

&lt;p&gt;Great week :) Makers &amp;lt;3&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Jun 2015 23:50:44 +0100</pubDate>
        <link>http://natstar93.github.io//week3/2015/06/25/day-14.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week3/2015/06/25/day-14.html</guid>
        
        
        <category>week3</category>
        
      </item>
    
      <item>
        <title>Day 13 | Looking up</title>
        <description>&lt;p&gt;Today was a pretty good day. For the last week or so I’ve been a bit worried about whether I’ve been understanding enough and whether I’ve been implementing the concepts correctly but today I feel pretty good about everything! The three things that really pleased me today were my 1:1, making some real progress with this week’s work and some chats and tips from the awesome alumni helpers. So my blog post is basically about those things in turn.&lt;/p&gt;

&lt;p&gt;I’ve been looking forward to my 1:1 since Monday. Each week we sign up for 1:1s with a coachineer to discuss how the weekend challenge was. I had so many questions and doubts after last weekend’s, so was happy for the opportunity to get some feedback. The main advice I gained was that the implementation doesn’t have to be perfect the first time you have a go at it. Junior (and even senior) devs don’t get it right first time but will then go back and try another approach based on their learnings. It’s better to have had a go than to have spent a long time planning things out and have tried nothing. It’s also better to do a hard reset after 3 commits than after a hundred, so questioning what you’re doing at all times is really important! The Single Responsibility Principle is the most important thing to bear in mind. As long as each method only does one thing and they’re all named correctly it will be easier to see how things fit into place.&lt;/p&gt;

&lt;p&gt;Other points that came up were:&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Methods should have one word names.&lt;/strong&gt;
This can flag if the method is definitely supposed to belong to that class or not&lt;br /&gt;
e.g. my add_dishes class should just be add, which will help determine if add is the responsibility of that class&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Give classes and methods very specific names.&lt;/strong&gt;
So that you don’t get confused about what their purpose is…&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;No overly fancy code.&lt;/strong&gt; Keep it simple. Simple == readable. I was really proud of the following neat little line (Codewars people seem to love this kind of stuff), but when my coachineer asked me to explain it it took me a minute or two to remember! A simpler code snippet with explicit names for variables would have explained itself.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@dishes.map{ |k,v| &quot;#{k} (£#{&#39;%.2f&#39; % v})&quot;}.join(&#39;, &#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;• &lt;strong&gt;Try not to output strings (apart from when raising errors).&lt;/strong&gt; Symbols are usually a good bet. Text is outputted to the interface when you start developing the fron end parts properly. Which leads nicely on to my next point…&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Ruby will make more and more sense as we progress through other topics.&lt;/strong&gt; I’m starting to get a better picture already through studying views, controllers, REST and all the http request stuff we’re doing at the moment.&lt;/p&gt;

&lt;p&gt;The battleships front end implementation went very well today. The tests are lovely (and are all passing) and the game interface is shaping up nicely and doing what it’s supposed to do. (It doesn’t look beautiful, but I’m resisting the temptation to bash out a quick stylesheet as I know I’ll get in trouble for doing something that’s not an MVP!). Drawing diagrams of what messages you want to pass to the server and get back really helped with all this. I left feeling really pleased with what we’d produced and the BDD approach we followed. All the more so because of the blockers we ran into and overcame. Makers always say that trying, failing and overcoming is one of the best ways to learn.&lt;/p&gt;

&lt;p&gt;We had a few visits to the alumni help desk today which were fantastic. Sarah in particular helped a lot by never providing the direct answer to a problem, but asking us questions and prompting us to use particular debugging methods in order to work the problems out ourselves. I understand so much more than I would have had I been told the answer. For example when an error of ‘object has nil class’ was being returned, we wrote code to output all of the objects used by that method and quickly identified the one which was behaving incorrectly. The detailed examination of error messages and ways to debug we practiced are really crucial and will transcend other languages and technologies.&lt;/p&gt;

&lt;p&gt;Can’t wait for tomorrow!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;

</description>
        <pubDate>Wed, 24 Jun 2015 20:44:37 +0100</pubDate>
        <link>http://natstar93.github.io//week3/2015/06/24/day-13.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week3/2015/06/24/day-13.html</guid>
        
        
        <category>week3</category>
        
      </item>
    
      <item>
        <title>Day 12 | Jen, this box is the internet</title>
        <description>&lt;p&gt;This week we’re learning about a newfangled invention called… the ‘internet’. We played a game in our stand up to help illustrate how http requests are sent out to servers, what controllers and views do to build pages and retrieve app logic, and how responses are sent back to the client. This involved Theo and Lucy (requests and reponses) running between the client and server and pretending to die, and other parties shouting messages. Probably the best way ever to learn the roles of all the constituent parts, and so much more memorable than a diagram full of boxes and arrows!&lt;/p&gt;

&lt;p&gt;The most important points so far which relate to this week’s work (using Sinatra) are:&lt;/p&gt;

&lt;p&gt;HTTP: Requests out, responses back&lt;/p&gt;

&lt;p&gt;Controller uses the following methods:
get: read data
post: change state of system&lt;/p&gt;

&lt;p&gt;Controller takes an incoming request and decides if it needs to consult app logic to illicit a response. It then uses views to build its pages. Views (in our case) contain erb (embedded ruby) which is evaluated and turned into html.&lt;/p&gt;

&lt;p&gt;We are allowed to use a global variable for a new instance of our Game class this week but then never again after that or we’ll be shot. We’re going to find out better ways of allowing our data to persist (cue databases, presumably) next week.&lt;/p&gt;

&lt;p&gt;Ooh and HTML and CSS are due to pop up at various points, yay let’s make everything pretty!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Jun 2015 22:01:40 +0100</pubDate>
        <link>http://natstar93.github.io//week3/2015/06/23/day-12.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week3/2015/06/23/day-12.html</guid>
        
        
        <category>week3</category>
        
      </item>
    
  </channel>
</rss>
