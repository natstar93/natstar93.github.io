<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Diary of a Developer</title>
    <description>A blog following my journey through Makers Academy and beyond...
</description>
    <link>http://natstar93.github.io//</link>
    <atom:link href="http://natstar93.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 16 Jun 2015 19:33:49 +0000</pubDate>
    <lastBuildDate>Tue, 16 Jun 2015 19:33:49 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Day 7 | A new approach</title>
        <description>&lt;p&gt;&lt;code&gt;A minimum viable product (MVP) is the simplest system you can build to validate the fundamental concept of what you want to build. An MVP sequence is a series of systems of gradually increasing complexity that take you slowly towards a more complex system that&lt;/code&gt; &lt;code&gt;supports more features. There is no absolute way of determining what an MVP should be as it depends on the domain, what you are trying to build, what the stakeholder needs are and so on. However, if you are building lots of components that do not work independently and are looking to hook them together later in order to build a complex system then you are probably doing things wrong.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Due to my designated partner not being around today I ended up working in a three again. Since we were all at different stages we dedided to start again and follow the MVP approach, focussing on really getting the essential functionality down and not worrying about speed.&lt;/p&gt;

&lt;p&gt;This way of working really suits me. I’ve realised I love TDD and getting to consider the logic of each baby step, and writing a good test and getting it to pass is very gratifying! Even if it your program doesn’t do that much yet it’s great knowing you have the foundations of something that has the potential to be awesome.&lt;/p&gt;

&lt;p&gt;I’ve hashed a few things together in my time. My attempt to learn javascript last year resulted in some very cool hand-coded things such as &lt;a href=&quot;http://www.natalie-akam.com/carousel/carousel_template.html&quot;&gt;image carousels&lt;/a&gt; and jquery nav bars. I was thrilled to have created them on my own, but I never really knew if the code I’d written was any good or followed any decent design principles (Nikesh cheerfully confirmed to me in my Makers interview that it definitely didn’t). I’m just happy I’ve now got the opportunity to sort this all out.&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Jun 2015 19:56:22 +0000</pubDate>
        <link>http://natstar93.github.io//week2/2015/06/16/day-7.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week2/2015/06/16/day-7.html</guid>
        
        
        <category>week2</category>
        
      </item>
    
      <item>
        <title>Day 6 | Uphill Battleships</title>
        <description>&lt;p&gt;Week two already? My how time flies! Speaking of flying, this weekend I completed the Airport Challenge which was our cohort’s weekend homework. At first I massively overcomplicated it by adding in methods that I later realised might not be necessary to satisfy the user stories, so I did have to do a bit of refactoring and removing. I’m pretty comfortable with doubles and stubs now, but I think I still need to do a bit of work on identifying appropriate tests. My builds passed (3/3 with 100% test coverage) so I’m happy about that. And I got a new sticker. YAY STICKERS!&lt;/p&gt;

&lt;p&gt;Today we started work on the Battleships project. It is similar in theory to last week’s work, except this time we have no guidance and it uses game logic and is generally a lot more complex!&lt;/p&gt;

&lt;p&gt;We started with a bit of domain modelling and CRC, then got started on building the tests and corresponding methods for a 1 x 1 board and a single ship. That all went well and it seems the things we learnt last week about TDD, logical baby steps, doubles, git pong, attr_accessors, constants, naming, DRY, feature testing and a load of other topics has really stuck and become almost second nature at times. Battleships is a difficult project but we made good progress today and built a lot of cool methods.&lt;/p&gt;

&lt;p&gt;The day was definitely enhanced by partaking in yoga and meditation. I’m really getting into these. At first I was a bit dubious, expecting to feel instant effects like I do after a run or a high intensity Samba class but I’ve realised the benefits are actually a bit more subtle and long lasting. When I reflect on a day I don’t recall feeling stressed, negative or anxious if I’ve taken part in wellbeing activities. This is really important when you’re learning a lot of new concepts and constantly feeling out of depth. You really need to ground yourself.&lt;/p&gt;

&lt;p&gt;I’ll just finish today by saying.. “ommmmmmmmmm”&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Jun 2015 20:51:52 +0000</pubDate>
        <link>http://natstar93.github.io//week2/2015/06/15/day-6.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week2/2015/06/15/day-6.html</guid>
        
        
        <category>week2</category>
        
      </item>
    
      <item>
        <title>Day 5 | Double Trouble</title>
        <description>&lt;p&gt;Since there are an odd number in our cohort, today I ended up in a three instead of a pair for the day’s activities. I was a little aprehensive about this because I’d been told it was quite difficult. In actual fact it turned out to be an incredibly productive day and opened up a lot of discussion about various concepts we were studying. I feel like I learned so much today just from talking things though with my little group!&lt;/p&gt;

&lt;p&gt;A concept we were introduced to yesterday and began using today was ‘doubles’. When performing any kind of testing it’s really important to only test/vary one element at a time to ensure you are truly testing the correct thing. However, it turned out a lot of the docking station methods we had built relied on bikes being created correctly or returning from a method call with certain properties, so our docking station unit tests weren’t really fair. If there was an error in the bike’s report_broken method this could propagate though and affect the result of release_bike method.&lt;/p&gt;

&lt;p&gt;Doubles are objects that you can give certain properties to in order for them to accurately impersonate your objects.&lt;/p&gt;

&lt;p&gt;In the example mentioned above, if we were wanting to check that the release_bike method released broken bikes only we might use the following double:&lt;/p&gt;

&lt;p&gt;bike = double :bike, broken? true&lt;/p&gt;

&lt;p&gt;That way we could be sure that we were testing the behaviour of the method only, not the behaviour of the bike.&lt;/p&gt;

&lt;p&gt;It sounds very simple but there were some complications around ensuring your tests are actually testing your method, and not the double itself! We also briefly looked at stubs and mocks, which can be used to simulate the behaviour an object might display after having certain methods called on it.&lt;/p&gt;

&lt;p&gt;We did some activities to assess our progress so far this afternoon and consolidated the learning objectives. I can safely say it’s been a hell of a week and I’ve learnt absolutely loads! I made a few little second week resolutions to myself to ensure that I stay on track and went home happy and looking forward to the weekend and the ‘airport challenge’ which is due on Monday morning!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Jun 2015 20:51:52 +0000</pubDate>
        <link>http://natstar93.github.io//week1/2015/06/12/day-5.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week1/2015/06/12/day-5.html</guid>
        
        
        <category>week1</category>
        
      </item>
    
      <item>
        <title>Day 4 | BROKEN Boris Bikes</title>
        <description>&lt;p&gt;Today was a day of ups and downs. I’ve discovered that it’s incredibly difficult to switch pairing partners part way through a project. It’s all good experience and practice of course, as there will be plenty of times in our future jobs when we have to jump in, understand someone else’s repo and just get on with it. It really pushes you to make sure you understand the code, especially when you’re presented with a solution (or part solution) to the same problem that someone’s approached from a really different angle.&lt;/p&gt;

&lt;p&gt;My partner and I have pretty different styles of working, so it was great experience in adapting to someone else’s way of doing things. At times I didn’t feel like I was being that good a partner as I sometimes find it difficult to explain concepts or ideas that make sense to me in my head. I’ll bring this up in my 1:1 next week as I’d like to improve on this.&lt;/p&gt;

&lt;p&gt;Today we covered off a lot of the material I was doing yesterday, and started to work on the problem of broken bikes mid-afternoon. Mid-afternoon is that strange time when sometimes information overload hits you and complicated concepts start to not make sense anymore. We made some progress but on the whole I wasn;t that happy with the amount I achieved today. I went home a bit unhappy, and decided to get stuck into it again as soon as I got back.&lt;/p&gt;

&lt;p&gt;This evening went amazingly well. In my quiet and peaceful lounge I managed to work things out in clear, logical steps and build the functionality I needed in what I think is the best way I could have. I’m really happy it went so well and that I ended the day on a high!&lt;/p&gt;

&lt;p&gt;Here’s my new favourite little array method (using a ‘destructive selector’.. ooh sounds exciting)&lt;/p&gt;

&lt;p&gt;arr.delete_at(index { block })&lt;/p&gt;

&lt;p&gt;Used to detect the first working bike of an array, remove it from the array and return it to the method call:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;@bikes.delete_at(@bikes.index {&lt;/td&gt;
      &lt;td&gt;bike&lt;/td&gt;
      &lt;td&gt;bike.working? })&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;And another line I really liked is this super easy to read ‘if’ statement&lt;/p&gt;

&lt;p&gt;fail ‘No bikes available’ if no_working_bikes?&lt;/p&gt;

&lt;p&gt;and here’s that working? method, if you’re interested. It’s packaged away in a private method. It’s good practice to not make a single method do more than one thing, and by paying attention to this and naming things well you really do start writing very ‘plain english’ code that’s easy for others to understand.&lt;/p&gt;

&lt;p&gt;def no_working_bikes?
    bikes.none? { |bike| bike.working? }
  end&lt;/p&gt;

&lt;p&gt;Simples, right?&lt;/p&gt;

&lt;p&gt;Anyway, I’ll sign off now. Looking forward to whatever challenges Friday brings!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Jun 2015 20:15:00 +0000</pubDate>
        <link>http://natstar93.github.io//week1/2015/06/11/day-4.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week1/2015/06/11/day-4.html</guid>
        
        
        <category>week1</category>
        
      </item>
    
      <item>
        <title>Day 3 | Boris Bikes</title>
        <description>&lt;p&gt;Today started by being locked out of the building and catching up with the rest of the cohort and seniors while stuck in the stairwell. I met my mentor in person for the first time and found out about which bits of the course are the hardest (week 7 apparently, and week 3 is a big step up from weeks 1 &amp;amp; 2). Eventually the person with keys arrived (should we call them a.. hash..? Sorry, geeky joke. You can’t live and breathe code every day without it infiltrating everything including your humour) and we made our way in to start day 3…&lt;/p&gt;

&lt;p&gt;Stand ups were the first order of the day and it turned out that everyone had quite different experiences yesterday. Some pairs completed all of the tasks, and some spent longer delving into different solutions to the first problem, experimenting with different types of solution and refactoring them. I think it’s pretty cool that we’re paired with different people every day and so will naturally have some quite different experiences every day with people who think and act in different ways. There doesn’t seem to be a single way of approaching the problem either. I think everyone found a lot of value in what they did but also appreciated that other pairs’ approaches were completely different and very valuable in a different way.&lt;/p&gt;

&lt;p&gt;Today’s challenge was coding part of the Boris Bike system. It started with drawing out some initial domain model diagrams, then following a step by step tutorial to complete rspec setups and commit initial tests. We practiced setting up remotes to our partners’ repos and pull and pushing to the right places.&lt;/p&gt;

&lt;p&gt;By the afternoon standup we were all a bit.. disillusioned. A lot of people felt we’d spent a lot of the morning following instructions and wouldn’t feel confident in recreating the work we’d done yet. There were also some worries about the amount of time lunch, meditation sessions and the afternoon standups were taking as everyone was itching to be getting on with writing the code. I think we’re going to organise our time better from now on so that the necessary distractions mentioned are spaced out a bit more allowing us longer periods of ‘proper work’ time in between.&lt;/p&gt;

&lt;p&gt;The afternoon was spent completing more of the tutorial. My pair partner Massi and I both had brain melt at about the same time and went for a break which really helped. After that everything made a lot more sense and we finally realised we’d absorbed more than we’d realised of the morning’s work. We were set some quite challenging tasks which threw up a few unexpected bugs but together we managed to spot things, suggest things and make a good job of testing and TDDing the hell out of our little methods. Although it took us until 7:30 to get to the end of the part we wanted to complete, we were on a roll for the last couple of hours and were incredibly happy with the state of our repo when we left!&lt;/p&gt;

&lt;p&gt;I think we made a good team today and once again the bits that made it successful were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; The combination of two peoples&#39; ideas and experience&lt;/li&gt;
&lt;li&gt; The strength to let go of your own idea and fully understand the idea someone else is proposing then objectively judge that it is more reasonable than your own&lt;/li&gt;
&lt;li&gt; The ability of the navigator to be an eagle eyed typo spotter/nitpicker so builds rarely fail due to silly mistakes&lt;/li&gt;
&lt;li&gt; The willingness of both parties to take a step back, research something together or just allow the other time to re-read and let the information sink in&lt;/li&gt;
&lt;li&gt; An awareness of your limitations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Really pleased with how today turned out. Thanks to Massi my pair partner! Your ability to do all of this in a language that is not your own is pretty awesome and we definitely accomplished some great things!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;

</description>
        <pubDate>Wed, 10 Jun 2015 22:41:42 +0000</pubDate>
        <link>http://natstar93.github.io//week1/2015/06/10/day-3.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week1/2015/06/10/day-3.html</guid>
        
        
        <category>week1</category>
        
      </item>
    
      <item>
        <title>Day 2 | TDD. Success == Failure</title>
        <description>&lt;p&gt;Today was our first ‘proper’ day as Makers students. I feel like the day flew by, but when I look back at what we’ve actually achieved today I know the reason I am so tired now is that we did a hell of a lot. Here’s a bit of a summary of the day…&lt;/p&gt;

&lt;p&gt;The day started with a stand up in groups led by one of the coach engineers (who are what normal people would call teachers) where we discussed what we’d achieved yesterday, what things may be blocking our progression and what we were aiming to do next. This is the format of all our twice daily stand ups from now on. Since yesterday was quite a laid back introduction day, we mentioned things like that we’d got to know people better and had seen the value in and challenges of teamwork from our pseudo code and spaghetti-marshmallow exercises.&lt;/p&gt;

&lt;p&gt;The morning’s group talk focussed on TDD (Test Driven Development), then after a brief overview of the task we were quickly rushed off in our pairs to figure it out and complete it.&lt;/p&gt;

&lt;p&gt;I’m happy with how Kirsten and I completed the task. We worked through it in quite a considerate and methodical way, making sure to read everything and bear in mind the objectives of the task. The thing to remember about TDD and pairing is that it’s not necessarily about being the first to finish, it’s about taking into account any possible input and making sure you a) have tests in place that cover any type of input and b) that you buid your code up slowly making sure not to miss anything. That way you’ll end up with a truly robust program and hopefully won’t have to rewrite anything, just refactor it.&lt;/p&gt;

&lt;p&gt;TDD involves writing a test, running it on your code and watching it fail, then writing a line or two of code in your program to make that test pass. You then create a new test and repeat until, voila, you have a page full of tests and a program that does all kinds of cool stuff without a single bug. The incremental method can sometimes seems a bit trivial, for example if you want to write a program ‘fizzbuzz’ that outputs ‘fizz’ every time 3 is entered..&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Common approach:
Write code to output &#39;fizz&#39; when a multiple of 3 is entered
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
TDD approach: 
Write test to output &#39;fizz&#39; when 3 is entered. Test (test passes). Write test to output &#39;fizz&#39; when 9 is entered. Test (test fails). Rewrite original line of code to output &#39;fizz&#39; when a MUTIPLE of 3 is entered.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So, I hear you ask, why on earth would you want to do in 5 steps what you could easily do in 1? Isn’t the first method a lot quicker? Are you some sort of moron who doesn’t know their 3 times table? All valid questions.. But the point of the TDD approach is to capture any situation and make sure it is logically thought out. It’s not going to be long before we’re writing much larger programs which don’t have such obvious solutions, so it’s best to get in good habits now. Another example helps illustrate this..&lt;/p&gt;

&lt;p&gt;Task: Write a program that enters ‘fizz’ when a multiple of 3 is entered, ‘buzz’ when a multiple of 5 is entered and ‘fizzbuzz’ when a multiple of 15 is entered.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Possible common approach:
Write code to output &#39;fizz&#39; when a multiple of 3 is entered
Write code to output &#39;fizz&#39; when a multiple of 5 is entered
Write code to output &#39;fizzbuzz&#39; when a multiple of 15 is entered
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But there’s an error here… 15 is also a multiple of 3 and 5, so which output does it return?&lt;/p&gt;

&lt;p&gt;If the code had been written using TDD there would be a test case for 15 and a handy error message would be outputted letting you know why the build had failed (assuming you’d set up a descriptive and specific error message). You would then be able to examine the issue with your code and write it so that ALL tests passed at the same time. Only then you would be sure that your code was able to satisfy all three cases simultaneously.&lt;/p&gt;

&lt;p&gt;The real value was shown to us when we decided to do a test case for a string and found that all but the test we’d just set up - to test whether the input was not an integer - failed. This led us to realise that we needed to test for this first then exit the program if the input was proven to be something other than an integer. Otherwise the program would try and see what happened when a string was divided by 3… (Try it, it doesn’t make sense)&lt;/p&gt;

&lt;p&gt;Of course, the TDD relies on you writing your tests correctly (which is where your pair partner comes in handy!) and making sure you’ve covered all scenarios e.g. negative integers, zero, strings/floats/any other non-integer.&lt;/p&gt;

&lt;p&gt;So that’s TDD part 1 in a nutshell. I feel like I’ve gone off on one and written a very long post about it. Today also included some variations on the original challenge and a yoga session part way through the afternoon which really helped clear my mind and help me refocus. It’s amazing how much energy you can get from standing on one leg, arms outstretched and pretending to be a tree… But I’ll write a post about yoga another day as I’m going to make time to be a regular in those sessions :)&lt;/p&gt;

&lt;p&gt;I’m going to finish by giving a big shout out to my awesome first ever pairing partner Kirsten for her humour, patience, intelligence, down-to-earthedness and diligence. We rocked it today!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Jun 2015 21:46:34 +0000</pubDate>
        <link>http://natstar93.github.io//week1/2015/06/09/day-2.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week1/2015/06/09/day-2.html</guid>
        
        
        <category>week1</category>
        
      </item>
    
      <item>
        <title>Day 1 | And we&#39;re off!</title>
        <description>&lt;p&gt;Today was the day I had been waiting for for… several weeks since I passed my interview. The good people at Makers decided to be nice to us and ease us in gently, which wasn’t what I was expecting considering that with the pre-course material they dropped us in the deep end (of a pool of gasoline, then set it on fire in week 3 and watched us suffer).&lt;/p&gt;

&lt;p&gt;After our free breakfast, the day started off with some getting-to-know-you games and teamwork exercises, then continued with some brilliant talks on how to do well at Makers and on how to look after your body and mind during the Hardest Thing You’ll Ever Do (TM).&lt;/p&gt;

&lt;p&gt;In a way the ‘body and mind’ talk sticks with me the most, because I wasn’t really expecting it. I’ve realised I’m going to have to eat well, exercise a bit and sleep well in order to get the most out of this experience. Makes sense really. Also, yoga and meditation have been suggested. I’ve never fully understood the benefits of either, but Dana (our wonderful Chief Joy Officer) explained that they are brilliant ways of facilitating the synapses in your brain to connect in new ways while your mind refocusses itself. At last, a scientific explanation that resonates with me. On top of that, they’ve been proven to energise you, reduce anxiety, ward off illnesses and many other cool health benefits. Sign me up for yoga 101 please!&lt;/p&gt;

&lt;p&gt;Another great thing Dana discussed was Mindfulness. No matter how hard you’re working or how much pressure you’re under, you must not lose track of this. Be courteous to others, and address your issues. A walk home today which involved seeing people in a rush pushing past each other and swearing at complete strangers, and seeing a man in Sainsbury’s shout at a timid cashier for suggesting he use the self-service tills (she wasn’t to know he was queuing at the kiosk so he could buy his fags) made me think there should be more of this in every institution or company…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nat x&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 08 Jun 2015 21:46:34 +0000</pubDate>
        <link>http://natstar93.github.io//week1/2015/06/08/day-1.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week1/2015/06/08/day-1.html</guid>
        
        
        <category>week1</category>
        
      </item>
    
      <item>
        <title>Pre-course Summary | T minus 2 days!</title>
        <description>&lt;p&gt;Wow. That 4 weeks went really quickly! It scares me to think that we’re a quarter of the way through the journey in effect. Other statistics that scare me are: in 2 weeks I’ll be mentoring a newbie, in 6 weeks I’ll be a ‘senior maker’ and in 11 weeks I’ll be graduating (touch wood). And we haven’t even had our first day yet!&lt;/p&gt;

&lt;p&gt;The last four weeks have been spent learning how to effectively use Github &amp;amp; Bash and trying to cram as much Ruby knowledge into my head as possible via tutorials, documentation and a rather fun site called &lt;a href=&quot;http://www.codewars.com/about&quot;&gt;Codewars&lt;/a&gt;. The work really ramped up in the 3rd week and I’m still desperately trying to finish bits before we start on Monday. Admittedly half way through pre-course week 3 wasn’t exactly the best time to go off on holiday to Barcelona…&lt;/p&gt;

&lt;p&gt;In addition to the massive pile of pre-course work I’ve also been working on this blog quite a bit, which may not be apparent from the number of posts (or lack thereof). I decided to be adventurous and set it up using Jekyll and Github rather than a pre-made template (since I’m a developer, not a blogger, right?). Thanks to this wise decision I’ve had to solve a number of issues including getting the preview server to work (finally worked out you have to change the config file). I’ve also recently discovered that the css stylesheets don’t work exactly how I thought they would. I think you have to create a stylesheet separate from the main one if you want to add new classes in… So depending on when you view my blog it may look like the most beautiful thing you’ve ever seen, a polished turd still, or something in between.&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Jun 2015 08:46:34 +0000</pubDate>
        <link>http://natstar93.github.io//pre-course/2015/06/06/pre-course-summary.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//pre-course/2015/06/06/pre-course-summary.html</guid>
        
        
        <category>pre-course</category>
        
      </item>
    
      <item>
        <title>The calm before the storm</title>
        <description>&lt;p&gt;Calm? There was no calm! I was expecting the weeks leading up to our first day to consist of a bit of light reading and a few challenges here and there, but 3 days into the pre-course we seem to be in the thick of it already, and I’m already scared of falling behind. But I am already loving it 😊 Here are my thoughts on the last couple of weeks.&lt;/p&gt;

&lt;p&gt;The moment I booked my interview at Makers I was presented with 12 hours worth of interview prep work, so I guess that was the point at which I said goodbye to my old life. After passing the interview Nikesh sent me some pre-pre-course material which kept me busy up until the pre-course meet up. At the time I thought it would save me some time later on, but I’ve now realised that the actual advantage is that I can delve deeper into the pre-course week 1 material and do a lot more research.&lt;/p&gt;

&lt;p&gt;It seems everything I’ve read and everyone I’ve spoken to has emphasised the same points really:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can say goodbye to your social life. Makers is your life now.&lt;/li&gt;
&lt;li&gt;This is one of the hardest things you&#39;ll ever do but it will be totally worth it!&lt;/li&gt;
&lt;li&gt;The staff and your fellow students will become a very important part of your life. They&#39;ll constantly be there with you for the next 16 weeks and will help you when you&#39;re close to giving up and crying in the corner.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve already learnt not to take this advice lightly, and that everyone, without exception, needs to take it seriously!&lt;/p&gt;

&lt;p&gt;Weeek 1 has been about command line/bash/shell scripting (I’m still getting to grips with the terminology). It’s been great fun learning how to use the commands and feeling like we’ve already started learning something fundamental that will no doubt come in useful to do even cooler things very soon.&lt;/p&gt;

&lt;p&gt;The course material is fantastic, you can tell it’s a tried and tested formula that’s been improved upon for each iteration (a new cohort starts doing this every 6 weeks). We were provided with tutorials and challenges that increase in difficulty by just the right amount. Often you’ll be presented with a question that you half know the answer to, which makes you refer back to the tutorial, really fully understand what you read initially and then apply that knowledge. I feel like I’m learning a lot and very quickly!&lt;/p&gt;

&lt;p&gt;I’ll sign off now by just saying…&lt;/p&gt;

&lt;p&gt;mkdir post-2
cd post-2
touch second-blog-post&lt;/p&gt;

&lt;p&gt;Ha ha I’m already speaking in a crazy secret language that only coders understand!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Thu, 14 May 2015 21:46:34 +0000</pubDate>
        <link>http://natstar93.github.io//pre-course/2015/05/14/the-calm-before-the-storm.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//pre-course/2015/05/14/the-calm-before-the-storm.html</guid>
        
        
        <category>pre-course</category>
        
      </item>
    
  </channel>
</rss>
