<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Diary of a Developer</title>
    <description>A blog following my journey through Makers Academy and beyond...
</description>
    <link>http://natstar93.github.io//</link>
    <atom:link href="http://natstar93.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 17 Jul 2016 22:49:03 +0100</pubDate>
    <lastBuildDate>Sun, 17 Jul 2016 22:49:03 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>FullStack 2016 - the conference on JavaScript, Node &amp; Internet of Things</title>
        <description>&lt;p&gt;&lt;strong&gt;TL;DR: FullStack 2016 rocked, and OMG progressive web apps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I spent the last three days immersed in the world of &lt;a href=&quot;https://skillsmatter.com/conferences/7278-fullstack-2016-the-conference-on-javascript-node-and-internet-of-things#overview&quot;&gt;FullStack 2016 - the conference on JavaScript, Node &amp;amp; Internet of Things&lt;/a&gt;. Broadly speaking, the sessions I attended covered new and future JavaScript features, principles of AWS Cloud and Lambda, an intro to Angular II, CSS &amp;amp; JS animations, React dev tools, React architecture &amp;amp; higher order components, how ELM inspired redux, JSON schema, a fun and light hearted Tessel 2 workshop and more. Even Ember. And there were a lot of Pokemon Go references. Most importantly, there was a LOT of excitement about progressive web apps (PWAs) and sessions about service workers, the tech that enables them. This stuff is the latest dev world bandwagon to be jumped upon and will be very big very soon. Watch out for my next blog post on PWAs coming soon to the Trainline Engineering blog :)&lt;/p&gt;

&lt;p&gt;The conference opened with a keynote speech from Chris Heilmann who works as a browser developer for Microsoft. The thing that struck me most about his talk was the emphasis on developing for accessibility and for users in developing nations who don’t necessarily have a fast connection and may be limited to an older/more obscure browser. This theme continued though several other talks and really got me thinking. It’s definitely something I will be considering more from now on and has also inspired me to think of ways to use my dev superpowers to help make the world a better place through tech. A sensible starting place for this is going to be attending some charity hacks soon.&lt;/p&gt;

&lt;p&gt;Another theme Chris spoke about was not trying to fight your browser! It was created the way it was for a good and sensible reason, so embrace the limitations and work with it rather than hacking your way into making things render nicely on the three browsers you actually bother to test stuff on. Because somewhere in the world someone will be looking at it on UC browser scratching their head and thinking ‘well that looks pretty terrible, I bet they didn&#39;t mean to do that’. The star of the moment PWAs of course got a mention, as a way of bringing native apps back to the web and making content more accessible for more people. Very cool stuff indeed.&lt;/p&gt;

&lt;p&gt;The conference overall was pretty amazing. The range of topics and quality of presentations was generally very good. Everything spoken about was on the cutting edge of current technology and we were all very excited and inspired by it all, not wanting the three days to end yet eager to get home and try some new things out. I met loads of amazing people over the three days too. Smart, friendly and enthusiastic developers from all over the world, some of whom had travelled a long way to be there and were only too happy to discuss, debate and predict the future. There was a common feeling that we’re very lucky to be involved in a sector that is this exciting and progressive, and 2016 is perhaps the most exciting year for it so far. But 2017 is going to be even better. And no, try as it might, the crazy politics of these times is not going to hold us back. Because we’re smart, we’re young, we’re international and we are going to change the world.&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Jul 2016 23:53:20 +0100</pubDate>
        <link>http://natstar93.github.io//conferences/2016/07/17/fullstackcon2016.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//conferences/2016/07/17/fullstackcon2016.html</guid>
        
        
        <category>conferences</category>
        
      </item>
    
      <item>
        <title>A Moment in Timezone</title>
        <description>&lt;p&gt;I noticed recently that an application in production was failing acceptance tests which checked that a user’s selected journey date was correctly displayed (and logged to the database). The root cause of this was that the BrowserStack server the tests were running on was an hour ahead of the timezone I was in. This was a fortunate catch since the tool currently does not allow timezone to be specified for testing purposes. Obviously I am now lobbying them to introduce this feature! The issue will become more important as the company I work for ventures into Europe and allows users to book journeys which cross timezones.&lt;/p&gt;

&lt;p&gt;The application uses React and renders on the server side, which is set to the London/Lisbon timezone (UTC+1 at the time of writing). However, the selected date was being saved as a date object based on the timezone the user is in, which could be anywhere in the world.&lt;/p&gt;

&lt;p&gt;Clearly this fix needed a few unit tests to describe the different situations that should be checked.&lt;/p&gt;

&lt;h3 id=&quot;enter-a-hrefhttpmomentjscomtimezonemoment-timezonea-sinon-and-a-bdd-style-approach&quot;&gt;Enter &lt;a href=&quot;http://momentjs.com/timezone/&quot;&gt;Moment Timezone&lt;/a&gt;, Sinon and a BDD-style approach!&lt;/h3&gt;

&lt;p&gt;Moment is awesome. Moment objects contain a lot of information about a particular datestamp and there exist a lot of different functions you can call on them to format and compare them. As such, moment is pretty widely used. What I needed though was an easy way of specifying the timezone of the test - a way of stubbing out the time and the timezone of the user or server running it.&lt;/p&gt;

&lt;p&gt;I used sinon to stub the time to a chosen datestamp (rather than hardcoding a test datestamp in which will eventually be a date in the past), and moment timezone to choose the client/user’s timezone.&lt;/p&gt;

&lt;p&gt;I tested that
1. The initial default date is selected correctly (as the current date in the UK)
2. When a user selects a new date, the date updates correctly&lt;/p&gt;

&lt;h3 id=&quot;initial-default-date-selected-correctly&quot;&gt;1. Initial default date selected correctly&lt;/h3&gt;

&lt;p&gt;This test checks that the datestamp is correctly set in the initial state when the page loads, regardless of timezone. The datestamp is the current datestamp in the UK.&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;javascript&quot;&gt;
import sinon from &#39;sinon&#39;;

describe(&#39;sets the departure date to current UK date&#39;, () =&amp;gt; {
	let sandbox;

	beforeEach(() =&amp;gt; {
		sandbox = sinon.sandbox.create();
	});

	afterEach(() =&amp;gt; {
		sandbox.restore();
	});

	it(&#39;from a different timezone&#39;, (done) =&amp;gt; {
		const testDate = moment(&#39;2016-06-09T20:30:00-09:00&#39;);
		sandbox.useFakeTimers((new Date(testDate)).getTime());
		const request = {
			email: &#39;&#39;,
			from: &#39;&#39;,
			to: &#39;&#39;,
			&#39;depart-date&#39;: &#39;2016-06-10T04:30:00+01:00&#39;,
			&#39;return-date&#39;: &#39;&#39;,
			errors: {},
		};
		const component = createComponent(&amp;lt;TicketAlert ticketAlertRequest={request} /&amp;gt;);
		expect(component.state[&#39;depart-date&#39;]).to.deep.equal(&#39;2016-06-10T04:30:00+01:00&#39;);
		done();
	});
});
&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;date-updates-correctly&quot;&gt;2. Date updates correctly&lt;/h3&gt;

&lt;p&gt;The test essentially checks that when the user in the +1 timezone chooses a date, the program coverts the selected date to the correct datestamp using UTC time rather than the user’s current timezone.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;moment.tz.setDefault(&#39;Europe/Paris&#39;)&lt;/code&gt; is used to choose the user’s current timezone.&lt;/p&gt;
&lt;pre&gt;
  &lt;code class=&quot;javascript&quot;&gt;
import sinon from &#39;sinon&#39;;

describe(&#39;sets the return date to current UK date&#39;, () =&amp;gt; {
	let sandbox;

	beforeEach(() =&amp;gt; {
		sandbox = sinon.sandbox.create();
	});

	afterEach(() =&amp;gt; {
		sandbox.restore();
	});

	it(&#39;from timezone 1 hour ahead of the UK&#39;, (done) =&amp;gt; {
		const testDate = moment(&#39;2016-12-10T08:30:00+00:00&#39;);  
		sandbox.useFakeTimers((new Date(testDate)).getTime());  // sets test datestamp
		moment.tz.setDefault(&#39;Europe/Paris&#39;);  // sets test timezone
		const request = {
			email: &#39;&#39;,
			from: &#39;&#39;,
			to: &#39;&#39;,
			&#39;depart-date&#39;: &#39;2016-12-10T08:30:00+00:00&#39;,
			&#39;return-date&#39;: &#39;&#39;,
			errors: {},
		}; // this is just the initial prop that is passed in on page load
		const component = createComponent(&amp;lt;TicketAlert ticketAlertRequest={request} /&amp;gt;);
		const selectedReturnDate = moment(&#39;2016-12-14T00:00:00+01:00&#39;, moment.ISO_8601);
		component.onReturnChanged(selectedReturnDate);  // selects the chosen date
		expect(component.state[&#39;return-date&#39;]).to.deep.equal(&#39;2016-12-14T00:00:00+00:00&#39;);
		done();
	});
});
	&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The fix was a lot easier to write than the tests were! And that’s the way development should be. It used moment timezone to check the user’s timezone offset and incorporate it in the datestamp calculations.&lt;/p&gt;

&lt;p&gt;To be on the safe side (and ensure my system time was being stubbed out correctly in the tests) I hosted the updated application on my Mac and accessed it from a VM of which I had reset the system time to another timezone. The application performed as expected :)&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Mon, 02 May 2016 23:53:20 +0100</pubDate>
        <link>http://natstar93.github.io//moment,/testing,/bdd,/timezone,/stubbing,/sinon/2016/05/02/moment.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//moment,/testing,/bdd,/timezone,/stubbing,/sinon/2016/05/02/moment.html</guid>
        
        
        <category>moment,</category>
        
        <category>testing,</category>
        
        <category>bdd,</category>
        
        <category>timezone,</category>
        
        <category>stubbing,</category>
        
        <category>sinon</category>
        
      </item>
    
      <item>
        <title>Why isn’t mocha running all my tests?</title>
        <description>&lt;p&gt;I noticed earlier that only 3 of my tests were running :(&lt;/p&gt;

&lt;p&gt;Here is my npm test script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;scripts&quot;: {
  &quot;test&quot;: &quot;babel-node --recursive test/**/*.spec.js&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This bit: &lt;code&gt;—-recursive test/**/*.spec.js&lt;/code&gt; is supposed to pick up all files ending in spec.js in all of the subdirectories of test, and anything in their subdirectories and so on. So how come &lt;code&gt;test/server/index.spec.js&lt;/code&gt; was being picked up, but everything with the pattern &lt;code&gt;test/common/[folder]/*.spec.js&lt;/code&gt; was not being picked up?&lt;/p&gt;

&lt;h3 id=&quot;you-need-to-use-quotes-when-specifying-a-mocha-file-path&quot;&gt;You need to use quotes when specifying a Mocha file path&lt;/h3&gt;
&lt;p&gt;If quotes are omitted, you may not be able to run tests in subdirectories unless you are running them on Windows. This reference &lt;code&gt;test/**/*.spec.js&lt;/code&gt; without quotes will only look for spec files in the &lt;em&gt;direct subdirectories&lt;/em&gt; of test.&lt;/p&gt;

&lt;p&gt;I changed my script to (note the single quotes around the file path):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;scripts&quot;: {
  &quot;test&quot;: &quot;babel-node --recursive &#39;test/**/*.spec.js&#39;”
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and all was well!&lt;/p&gt;

&lt;h3 id=&quot;you-dont-necessarily-need-to-specify-a-file-path&quot;&gt;You don’t necessarily need to specify a file path&lt;/h3&gt;
&lt;p&gt;Mocha automatically looks for a folder called test and runs anything in there that looks like a test file. So if you want your script to run all of your tests you don’t even need to reference a file path.&lt;/p&gt;

&lt;h3 id=&quot;windows-is-a-pain-in-the-arse&quot;&gt;Windows is a pain in the arse&lt;/h3&gt;

&lt;p&gt;If you need your test script to run on Windows too, the cli solution might not work. Pretty annoying. The best solution I’ve found to get around this is to separate your unit and functional tests into separate subdirectories of test (which is quite a nice and organised idea anyway) and just specify the following in your test script.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;scripts&quot;: {
	&quot;test&quot;: &quot;babel-node --recursive test/unit”
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Easy, huh?&lt;/p&gt;

&lt;p&gt;Mystery solved!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.natalie-akam.com/Blog/images/squirrel.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Apr 2016 21:29:15 +0100</pubDate>
        <link>http://natstar93.github.io//mocha,/testing/2016/04/06/mocha.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//mocha,/testing/2016/04/06/mocha.html</guid>
        
        
        <category>mocha,</category>
        
        <category>testing</category>
        
      </item>
    
      <item>
        <title>Redux Notes</title>
        <description>&lt;h3 id=&quot;principles-of-redux&quot;&gt;Principles of redux&lt;/h3&gt;

&lt;p&gt;Use pure functions (those which rely only upon the input args, do not mutate the input args and do not do anything else such as make a database call)&lt;/p&gt;

&lt;p&gt;State is kept in a single store&lt;/p&gt;

&lt;p&gt;State is read-only and can only be changed by actions&lt;/p&gt;

&lt;h2 id=&quot;actions&quot;&gt;Actions&lt;/h2&gt;

&lt;p&gt;Actions are objects which send data to the store. They are sent there using store.dispatch(). There is no other way of getting data to the store.&lt;/p&gt;

&lt;p&gt;They must include a ‘type’ e.g. ‘ADD_TODO’.&lt;/p&gt;

&lt;p&gt;Pass as little data in each action as possible (single responsibility!)&lt;/p&gt;

&lt;p&gt;Action creators create the actions. All they do is return the action! Use the dispatch function to dispatch them.&lt;/p&gt;

&lt;h2 id=&quot;reducers&quot;&gt;Reducers&lt;/h2&gt;

&lt;p&gt;Reducers describe how the state is updated in response to actions. It must be pure. That means it should not mutate arguments, call APIs or call non-pure functions. It just returns the new state.&lt;/p&gt;

&lt;h2 id=&quot;stores&quot;&gt;Stores&lt;/h2&gt;

&lt;p&gt;Stores store the state of the application. In redux a single store is used. Reducer composition can be used to split data handling logic.&lt;/p&gt;

&lt;p&gt;getState() allows access to state
dispatch(action) lets state be updated
subscribe(listener) registers listeners and returns a function to unsubscribe listeners&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Mar 2016 22:05:15 +0000</pubDate>
        <link>http://natstar93.github.io//redux,/javascript/2016/03/21/redux.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//redux,/javascript/2016/03/21/redux.html</guid>
        
        
        <category>redux,</category>
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Refactoring to ES6 and back again</title>
        <description>&lt;p&gt;I’ve been doing a lot of linting on a repo that recently got upgraded to Node. This mainly involves changing things to the ES6 syntax since the code was written in ES5. I used airbnb eslint to help me flag stylistic errors and remaining ES5 code.&lt;/p&gt;

&lt;p&gt;Here are a couple of ways of refactoring an ES5 setTimeout function which I found particularly interesting.&lt;/p&gt;

&lt;h3 id=&quot;original-es5-code&quot;&gt;Original ES5 code&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;handleReconnect() {
  const reconnectMs = this.reconnectSeconds * 1000;
  console.log(`attempting to reconnect to rabbit. in ${reconnectMs}ms`);
    this.reconnect = setTimeout(function() {
      this.internalConnect();
    }.bind(this), reconnectMs);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Linting error: func-name Missing function expression name&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I changed it to a named function and got…&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Linting error: prefer-arrow-callback Unexpected function expression&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h3&gt;

&lt;p&gt;Oook let’s use a fat arrow callback then.&lt;/p&gt;

&lt;p&gt;ES6 fat arrow functions automatically capture the value of &lt;em&gt;this&lt;/em&gt; from the outer, parent function. The value of &lt;em&gt;this&lt;/em&gt; inside an arrow function will always be the same as the value of &lt;em&gt;this&lt;/em&gt; in the arrow’s enclosing function.&lt;/p&gt;

&lt;p&gt;There is no need to use &lt;code&gt;const self = this&lt;/code&gt;, and you can deeply nest arrow functions to preserve &lt;em&gt;this&lt;/em&gt; through a series of asynchronous operations.&lt;/p&gt;

&lt;p&gt;So the above code can be simplified to the below ES6 function. It is much easier to read and means we do not have to use the bind function to bind the value of this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;handleReconnect() {
  const reconnectMs = this.reconnectSeconds * 1000;
  console.log(`attempting to reconnect to rabbit. in ${reconnectMs}ms`);
  this.reconnect = setTimeout(() =&amp;gt; this.internalConnect(), reconnectMs);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then… a &lt;a href=&quot;https://about.me/riccardocoppola&quot; target=&quot;_blank&quot;&gt;senior dev on my team&lt;/a&gt; pointed out that in this case since the internalConnect function was completely defined elsewhere in the file (and not changed by handleReconnect), a callback was not actually needed. We could just pass the function as an argument, remembering to bind &lt;em&gt;this&lt;/em&gt; again since the fat arrow function was no longer being used.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;handleReconnect() {
  const reconnectMs = this.reconnectSeconds * 1000;
  console.log(`attempting to reconnect to rabbit. in ${reconnectMs}ms`);
  this.reconnect = setTimeout(this.internalConnect.bind(this), reconnectMs);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Either way is valid, but the second is a little neater.&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcQ7ONJR-u9MiHrqeZpMzTqcaik9BrW-XskBAod45N6X1B2mXOGj&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Mar 2016 12:50:13 +0000</pubDate>
        <link>http://natstar93.github.io//refactoring,/javascript/2016/03/02/refactoring.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//refactoring,/javascript/2016/03/02/refactoring.html</guid>
        
        
        <category>refactoring,</category>
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Render Testing and Debugging on Mobile Devices</title>
        <description>&lt;p&gt;&lt;strong&gt;As featured on the &lt;a href=&quot;http://engineering.thetrainline.com/&quot; target=&quot;blank&quot;&gt;Trainline engineering blog&lt;/a&gt; :D&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Debug all the things!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’ve been spending quite a lot of time render checking and debugging various features recently. Unit and acceptance tests are essential for assessing the functionality of your application, but rendering is an important thing to check too and needs robust methods of testing. This post is an overview of each tool I used, culminating with instructions on how to use Charles Web Proxy Debugger to set conditions.&lt;/p&gt;

&lt;h4 id=&quot;chrome-dev-tools&quot;&gt;Chrome Dev Tools&lt;/h4&gt;

&lt;p&gt;This doesn’t really require any introduction but here’s one anyway for completeness. Chome Dev Tools provide a basic overview of how your app looks on a variety of smartphones, tablets and desktop screen sizes and are a developer’s best friend when it comes to diagnosing and fixing most CSS problems.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pros: Quick and easy to use, included with your browser already, easy to amend scripts using Fiddler/Charles web proxy, great for development.&lt;/li&gt;
  &lt;li&gt;Cons: Not 100% accurate. You will need to test on actual devices or emulators if you want to be sure there are no problems before pushing to production.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;xcode-simulator&quot;&gt;Xcode Simulator&lt;/h4&gt;

&lt;p&gt;This can be used to emulate a number of different Apple devices on all sorts of versions of OSX. So far the rendering seems to be true to life and the device applications are updated in real time so you know you’re using the most current versions (when Apple broke Safari the other day it also broke on the emulator, which was great fun). Since the simulator runs on your local machine you can just serve to localhost and go. It doesn’t take &lt;em&gt;that&lt;/em&gt; long to load, but it’s not exactly the quickest either. You can use Charles or Fiddler to proxy your scripts as you would in Chrome, too.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pros: Mirrors real device well, runs on local machine&lt;/li&gt;
  &lt;li&gt;Cons: Load time can get annoying if you are having to re-render something frequently, supports Apple devices only&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;android-studio&quot;&gt;Android Studio&lt;/h4&gt;

&lt;p&gt;I’d be lying if I said I knew a great deal about this tool. I was swiftly warned away from it by one of the developers in my team, who explained that the rendering is not necessarily representative of the device being emulated. The fact that the tool may not render things correctly made it unfit for purpose.&lt;/p&gt;

&lt;h4 id=&quot;iphone--safari-on-mac&quot;&gt;iPhone + Safari on Mac&lt;/h4&gt;

&lt;p&gt;Another Apple only solution (requires a Mac too). It allows you to debug your app on iPhone/iPad and comes with a Console and Network tab. It’s pretty easy to set up. First switch the Web Inspector on on your device by navigating to &lt;code&gt;Settings &amp;gt; Safari &amp;gt; Advanced&lt;/code&gt; and toggling Web Inspector to the On position. Load up the page you want to meddle with on your device. Then plug your device into the Mac using a lightning cable and open Safari. In the Safari menu go to &lt;code&gt;Develop &amp;gt; [Device Name] &amp;gt; [Name of page]&lt;/code&gt;. You will then be presented with the markup for your page, CSS rules and basically all the things you’d expect from Chrome dev tools. Change the code and watch your page update in real time :)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pros: Uses actual devices, debugging possible, breadth of tools that you would normally associate with Chrome&lt;/li&gt;
  &lt;li&gt;Cons: CSS rules tricky to edit, not as intuitive as Chrome, Apple devices only, Apple product overload&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;any-device-you-like--charles-proxy-debugger&quot;&gt;Any Device You Like + Charles proxy debugger&lt;/h4&gt;

&lt;p&gt;This setup will allow you to view a page on your device of choice and update its scripts. It means you can edit your test conditions (e.g. particular values for data being passed in) and view the outcome on any device you choose. Lovely stuff.&lt;/p&gt;

&lt;p&gt;First, you need to &lt;a href=&quot;http://www.charlesproxy.com/documentation/using-charles/ssl-certificates/&quot;&gt;download an SSL certificate&lt;/a&gt; for your particular device or OS. I used the &lt;a href=&quot;http://www.charlesproxy.com/documentation/additional/legacy-ssl-proxying/&quot;&gt;legacy certificate&lt;/a&gt; even though I’ve got the most up-to-date version of Charles and it worked just fine. Make sure both your device and your computer are on the same Wifi network. Then go to your phone’s Wifi settings and add a proxy. This is fairly straighforward on iPhone, but Android make it tricky by hiding things. If you’re on Android, hold down on the name of the Wifi network to make a dialogue box pop up, then click Modify Network. Select ‘Show advanced options’ and the proxy settings should appear. Enter your computer’s IP address and the port number Charles is using (more than likely to be 8888, but check in Charles at &lt;code&gt;Proxy &amp;gt; Proxy Settings &amp;gt; Proxies&lt;/code&gt;, and yes that is the real path).&lt;/p&gt;

&lt;p&gt;Now you should have Charles up and running. Check that a) the page loads on your device and b) when said page loads, the Structure panel in Charles picks up the activity. If either of these don’t happen, check your device and computer are on the same Wifi network and that your proxy settings are correct.&lt;/p&gt;

&lt;h5 id=&quot;charles-rewrite-tool&quot;&gt;&lt;em&gt;Charles Rewrite tool&lt;/em&gt;&lt;/h5&gt;

&lt;p&gt;This is a very handy tool that lets you modify your requests and responses so you can double check everything is rendering correctly under different conditions. Open up &lt;code&gt;Tools &amp;gt; Rewrite&lt;/code&gt;. Here you can add a new ‘Set’ for each set of conditions you want to apply. In the Locations menu add the URL(s) of the page you want to modify and then start adding the Rules in. In my case I substituted the existing value of PortalName in a tag object, to allow a test banner to render for closer inspection on Android.&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;For simple rendering checks whilst developing, Chrome dev tools are awesome and BrowserStack has a huge suite of browsers and devices. If you want to make sure things look pixel perfect on every device, load up your test environment on real devices where possible and on emulators of the devices you don’t own. If you want to check elements that only appear when script modificaions are made, use Fiddler on Windows and Charles on Mac using the proxy instructions above.&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Feb 2016 21:54:17 +0000</pubDate>
        <link>http://natstar93.github.io//testing,/debugging/2016/02/02/render-testing.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//testing,/debugging/2016/02/02/render-testing.html</guid>
        
        
        <category>testing,</category>
        
        <category>debugging</category>
        
      </item>
    
      <item>
        <title>iframe iPhone 6 bugs and quirks</title>
        <description>&lt;p&gt;A lot of my time over the past couple of days has been spent trying to work out why a &lt;a href=&quot;https://www.doubleclickbygoogle.com/solutions/revenue-management/&quot; target=&quot;_blank&quot;&gt;Google DoubleClick for Publishers (DFP) banner&lt;/a&gt; was rendering perfectly and responsively on desktop browsers and most mobile phone devices but not on the iPhone 6 range.&lt;/p&gt;

&lt;p&gt;DFP banners are normally used to display banner adverts, but at Trainline we use them to show messages relating to service disruptions e.g. ‘East Croydon station sucks and is experiencing massive delays’ (not a real disruption notification message).&lt;/p&gt;

&lt;p&gt;Here is one of those banners on an iPhone 6S. It thinks it’s a desktop banner and is trying to escape off the side of the screen :(&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.natalie-akam.com/images/disruption.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The problem was with the &amp;lt;iframe&amp;gt; element which is inserted by DFP and wraps the user’s inserted banner code. Unfortunately just telling it to have a width of 100% doesn’t cut it for iPhone 6. Safari will allow the content to take on its full width and stretch the iframe banner out. But only for iPhone 6 devices. Weird. It took a while to diagnose the problem and find a workaround, but the below CSS hack fixed it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iframe {
  width: 1px;
  min-width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the iframe width is set to 1px then overridden. This works well on iPhone 6 and allows the iframe to achieve a lovely responsive 100% width on everything. Happy days!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Jan 2016 17:12:28 +0000</pubDate>
        <link>http://natstar93.github.io//node/2016/01/29/iframe-bug.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//node/2016/01/29/iframe-bug.html</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>I love it when a plan goes completely wrong!</title>
        <description>&lt;p&gt;I’ve spent the last few days working through a MEAN tutorial I started months ago but never made that much progress on. I remember my poor pair partner David’s face when I exclaimed ‘oh, looks like I don’t have Node or Java installed on this laptop’ and the resulting 2 hours of installations and issues hampering our efforts to get to the &lt;a href=&quot;https://thinkster.io/mean-stack-tutorial#beginning-node&quot;&gt;interesting bit&lt;/a&gt;. It never really got off the ground. Having to redo the angular bits of the tutorial and ugh… the basic styling section, was a bit soul-destroying but at least it was over quickly. Like a bad nightmare. Happily, I’ve now moved on to the part where you get to play around with databases (fun) and the node/express/routing/debugging part (vaguely relevant to my job AND fun).&lt;/p&gt;

&lt;p&gt;I had forgotten databases could be a lot of fun. I even laughed once when Zeina was reminiscing about a particular week at Makers and merrily concluded ‘and that was when I realised I loved databases’. Mongo is a pretty simple non-relational database and I’m pretty sure its simplicity will lead me to use it in projects in the future. I nearly wrote ‘hackatons in the future’ there but then remembered that hackathons usually involve pretending you have a database and not just a crappy JSON file you’ve faked and that the judges will &lt;strong&gt;never ever see&lt;/strong&gt;. Anyway… I’ve now got the models, a little database that stores Posts and their related Comments and uses a couple of little database methods to increment upvotes on each when told to do so. I’m using Node and Express for the routing and associated error handling and have been finding about some new javascript methods and parameters… (see last section)&lt;/p&gt;

&lt;p&gt;The best thing about this tutorial has been the debugging side of things. It’s easy to zone out and become demotivated when typing out the lines of code the tutorial tells you to type. But then.. occasionally you make a mistake or misinterpret something. You dive into the database and realise that it doesn’t look like it should, or you run npm start and the app crashes. Bring on stack traces, stack overflows, console.log() here there and everywhere and setting up some extra routes in order to work out what’s going on. Suddenly you’re actually thinking and manipulating stuff to do what you need it to do, and celebrating when you work each little problem out with increasing ease. Happily, I now get to do this kind of stuff EVERY DAY at work, just with a little more pressure to make sure I a) get things done fairly quickly and b) don’t commit something stupid to the master branch of a real site.&lt;/p&gt;

&lt;p&gt;I restarted this tutorial with the aim of redoing the front end in React, which I’ll be using more and more in my job this year. Once I’ve cracked that, I’m hoping to think up a new React+Node+Mongo project to completely test drive. Happy days.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stuff I have learnt by doing this tutorial&lt;/strong&gt; (Enough waffle, get to the technical bit)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;next &lt;em&gt;- (parameter)&lt;/em&gt;&lt;br /&gt;
Explained &lt;a href=&quot;http://stackoverflow.com/questions/10695629/what-is-the-parameter-next-used-for-in-express/10695714&quot;&gt;here&lt;/a&gt; but it is an extra node parameter passed in addition to the usual response and request params. It is used to call the next middleware function in the request response cycle, so it’s sort of a callback. You can use it to control flow by breaking out of the code in your route based on whether the condition you’re looking at is satisfied or causes an error. In my code below you can see that next is used to break out and take the error details with it.&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;router.get(&#39;/posts/:post/comments&#39;, (req, res, next) =&amp;gt; {
  Comment.find((err, comments) =&amp;gt; {
    if(err) { return next(err); }
    res.json(comments);
  });
});
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;exec() method&lt;br /&gt;
The exec() method tests for a match in a string. It returns the matched text if it finds a match, otherwise it returns null. Shove this into your console:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;var str = &#39;Hi Nat&#39;;
patt = /Hi/g;
patt.exec(str);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should get back an array containing the matched text as a string. If you change the regex to something that’s not in the string you should get back null. Cool huh?&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jan 2016 21:38:28 +0000</pubDate>
        <link>http://natstar93.github.io//node/2016/01/03/MEAN.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//node/2016/01/03/MEAN.html</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>New years resolutions</title>
        <description>&lt;ul&gt;
  &lt;li&gt;Blog more&lt;/li&gt;
  &lt;li&gt;Mentor at Codebar&lt;/li&gt;
  &lt;li&gt;Attend meetups that provide pizza, beer and JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jan 2016 21:38:28 +0000</pubDate>
        <link>http://natstar93.github.io//2016/01/01/New-year.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//2016/01/01/New-year.html</guid>
        
        
      </item>
    
      <item>
        <title>Node Streams</title>
        <description>&lt;p&gt;Streams are a way of inputting and outputting data. They can be readable or writable (or both) and can be paused and resumed.&lt;/p&gt;

&lt;p&gt;Using the filesystem module we just saw, we can create a stream to read data as below. The data is read in in chunks, so the readStream on data event event is fired multiple times. A counter has been implemented which increments each time another chunk of data is received.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fs = require(&#39;fs&#39;);

var readStream = fs.createReadStream(&#39;lorem.txt&#39;);
readStream.setEncoding(&#39;utf8&#39;);

var counter = 0;

readStream.on(&#39;data&#39;, function(myData) {
  counter ++;
});

readStream.on(&#39;end&#39;, function() {
  console.log(counter);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another event listener is listening for a signal that the data has finished being read, and at this point it outputs the value of the counter variable to the console. You can therefore see how many chunks the data was streamed in.&lt;/p&gt;

&lt;p&gt;Write streams can be created as below&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var writeStream = fs.createWriteStream(&#39;copylorem.txt&#39;);

writeStream.write(&#39;Hello world&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some other useful commands you might like to use with streaming are&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;readStream.pipe(writeStream); // to pipe the data read in straight into the write stream

readStream.pause(); // pauses the reading of the stream
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Oct 2015 20:14:52 +0100</pubDate>
        <link>http://natstar93.github.io//node/2015/10/18/Node_streams.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//node/2015/10/18/Node_streams.html</guid>
        
        
        <category>node</category>
        
      </item>
    
  </channel>
</rss>
