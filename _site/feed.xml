<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Diary of a Developer</title>
    <description>A blog following my journey through Makers Academy and beyond...
</description>
    <link>http://natstar93.github.io//</link>
    <atom:link href="http://natstar93.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 04 Aug 2015 20:42:43 +0100</pubDate>
    <lastBuildDate>Tue, 04 Aug 2015 20:42:43 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Day 40 | Week 8 learning plan</title>
        <description>&lt;p&gt;&lt;strong&gt;Most Important Things I Learned:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Protractor and karma testing&lt;br /&gt;
• Angular setup&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Things I Struggled With The Most:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Server setup issues&lt;br /&gt;
• Making a second API call to Github to retrieve number of repos for each user displayed in search results. I really don’t get how to do this and will have to spend some time looking at Stefan’s solution. Would have much preferred to be able to work it out on my own but ran out of time&lt;br /&gt;
• Communicating Github access token to Heroku-hosted app securely&lt;br /&gt;
• Working out what tests to write..&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Changes I Plan to Make Next Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Try and get in a makerthon group who are using Express&lt;br /&gt;
• Read JS books to get to grips with some of the conecpts we looked at this week&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other Experiences or General Feedback This Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• A confusing but good week! I am happy we’ve studied concepts such as factories/services, promises and more on dependency injection, but I don’t feel 100% comfortable with them yet, hence wanting to read more JavaScript books&lt;br /&gt;
• ng-hide and ng-show didn’t come up. Presumably this is because we were meant to find them out on our own but I think they’re useful for the weekend homework&lt;br /&gt;
• Sad that the hardcore learning part of the course is pretty much over now, but looking forward to projects and hopefully creating some really awesome things!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Jul 2015 17:38:29 +0100</pubDate>
        <link>http://natstar93.github.io//week8/2015/07/31/day-40.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week8/2015/07/31/day-40.html</guid>
        
        
        <category>week8</category>
        
      </item>
    
      <item>
        <title>Day 39 | Testing times</title>
        <description>&lt;p&gt;My brain is hurting again. I’ve spent a lot of today debugging server setup issues and getting in the middle of a debate about Rack vs Sinatra as a method of serving up Single Page Applications. In the middle of all this my server file went missing and made me look like an idiot, and I had to follow a trail of breadcrumbs in the shape of error messages which told me I hadn’t done a load of obvious things. Not bundling my Gemfile before pushing to Heroku, and trying to use a server without a config file spring to mind as moments I’d rather forget (but have immortalised in this blog for some reason anyway).&lt;/p&gt;

&lt;p&gt;I’ve been using protractor for testing, and getting totally confused about what I’m meant to be stubbing and what I actually need to test. One of those days when you suddenly realise you’re trying to test that something is itself, and that maybe you’re overdoing it on the testing efforts.&lt;/p&gt;

&lt;p&gt;In short, anything that could go wrong went wrong today.&lt;/p&gt;

&lt;p&gt;Despite a multitude of setbacks, my little app is now finally on Heroku. It’s really not much to look at so far, but if you fancy dynamically searching Github using a funny little app I made, &lt;a href=&quot;https://nat-gihub-profiles.herokuapp.com/&quot; target=&quot;_blank&quot;&gt;do feel free&lt;/a&gt;. Tomorrow will hopefully result in some more interesting data being presented and maybe some CSS so it looks like a real thing.&lt;/p&gt;

&lt;p&gt;Here are some pointers for anyone deploying a simple Rack app:&lt;/p&gt;

&lt;p&gt;• Make sure you’ve created a Gemfile including your source, Ruby version and the ‘rack’ gem&lt;br /&gt;
• Bundle it, otherwise you won’t have a Gemfile.lock&lt;br /&gt;
• Shove your index, js folder, css folder and anything else your app needs in a ‘public’ folder&lt;br /&gt;
• Move your bower_components directory to public/bower_components&lt;br /&gt;
• Create a .bowerrc file in the top level of your application, and add the following text to it:  { “directory”: “public/bower_components” }&lt;br /&gt;
• Add a buildpack to your Heroku env variables like so: heroku config:add BUILDPACK_URL=git://github.com/qnyp/heroku-buildpack-ruby-bower.git#run-bower&lt;br /&gt;
• Make sure your node_components are .gitignored&lt;br /&gt;
• Make sure your config file looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Rack::Static,
  :urls =&amp;gt; [&quot;/images&quot;, &quot;/js&quot;, &quot;/css&quot;, &#39;/bower_components&#39;],
  :root =&amp;gt; &quot;public&quot;

run lambda { |env|
  [
    200,
    {
      &#39;Content-Type&#39;  =&amp;gt; &#39;text/html&#39;,
      &#39;Cache-Control&#39; =&amp;gt; &#39;public, max-age=86400&#39;
    },
    File.open(&#39;public/index.html&#39;, File::RDONLY)
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;• Note that you may need to amend the urls values array to include any other folders you need&lt;br /&gt;
• Your server will be looking at the root (public, in the example above) for additional files. Therefore you need to make sure the references at the top of your html file include a forward slash at the front &lt;code&gt;&amp;lt;script src=&quot;/js/app.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;br /&gt;
• Type &lt;code&gt;heroku create nats-awesome-app&lt;/code&gt;&lt;br /&gt;
• &lt;code&gt;heroku push origin master&lt;/code&gt;&lt;br /&gt;
• Junebugs, for our github-profiles challenge, if you’re using an API access token you’ll need to remove it from the .gitignore list. This doesn’t seem like a very satisfactory solution, but we were unable to find a good way of supplying a secret token to the front end. The best we could do was branch the repo for the heroku push and push to heroku using &lt;code&gt;git push heroku yourbranch:master&lt;/code&gt;. Do be aware that when switching between branches your .gitignored access token may disappear.&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jul 2015 23:11:29 +0100</pubDate>
        <link>http://natstar93.github.io//week8/2015/07/30/day-39.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week8/2015/07/30/day-39.html</guid>
        
        
        <category>week8</category>
        
      </item>
    
      <item>
        <title>Day 37 | Are you .gitignoring me?</title>
        <description>&lt;p&gt;Today I worked on a mix of AngularJS and some previous challenges. I’ve done a little bit of Angular before, at a time that now seems like forever ago. I like to call that period the ‘&lt;strong&gt;pre-Rubyist era&lt;/strong&gt;’. It was in March 2015, or thereabouts. The explanations and walkthroughs make a lot more sense now that I actually know how the back end and that big thing called the internet work.&lt;/p&gt;

&lt;p&gt;My pair partner and I dedicated a fair bit of time to making sure our all of our challenge builds to date were passing. My week 3 challenge was looking for Cucumber (the testing suite, not the refreshing salad item) which meant that the Travis CI build had thrown up an error. This was easily resolved by amending my Gemfile then creating a new Gemfile.lock by bundling from another location. I had an issue with this weekend’s build too. My bugfixing led to me correctly stubbing an image upload thanks to some huge help from Ptolemy, but it turned out the Travis error was due to me having specified the link to my image folder in the .gitignore file. This meant that when my ‘like’ feature tests were run in any copy of the repo other than my local directory they were unable to use images and would therefore FAIL MASSIVELY.&lt;/p&gt;

&lt;p&gt;This is what I had to do to get images in 3 of my image folders to be recognised by git:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/public/system/photos/images/*
!public/system/photos/images/000/
/public/system/photos/images/000/*
!public/system/photos/images/000/000/
/public/system/photos/images/000/000/*
!public/system/photos/images/000/000/001/
!public/system/photos/images/000/000/003/
!public/system/photos/images/000/000/006/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kind of a pain, right?&lt;/p&gt;

&lt;p&gt;I’m really happy that my build passes now :) Once I’ve CSS’d it up and worked out how to use Amazon Web Services’ image uploader it will be on Heroku for all to enjoy!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Jul 2015 21:21:55 +0100</pubDate>
        <link>http://natstar93.github.io//week8/2015/07/28/day-37.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week8/2015/07/28/day-37.html</guid>
        
        
        <category>week8</category>
        
      </item>
    
      <item>
        <title>Day 36 | Welcome to Natstagram! (1 like)</title>
        <description>&lt;p&gt;I think these weekend challenges are getting longer y’know… They’re also getting more and more interesting, and more satisfying to complete. Our weekend challenge this week was to recreate Instagram, an immensely popular but strangely simple site. I use ‘simple’ in a rather loose sense. &lt;em&gt;It’s simple to make if you have more than 5 days’ experience with Rails and have any experience at all with image uploads and stubbing the damned things.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I spent almost all of Saturday eating takeaway pizza and completing the Yelp clone from last week, working through extra features and using some shiny new gems. Then I moved onto the Insta-challenge which involved a lot of the same features, but I was able to make them bigger, better and smarter for having rehearsed them with Yelp. The biggest challenges were migrating database changes properly without ending up in a huge mess, and stubbing image uploads.&lt;/p&gt;

&lt;p&gt;My app has the following super awesome functionality and is soon to have some nicely bootstrapped CSS too.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Anyone can view photos&lt;/li&gt;
&lt;li&gt; Anyone can sign up with an email address or through Facebook&lt;/li&gt;
&lt;li&gt; Logged in users can comment on photos&lt;/li&gt;
&lt;li&gt; Logged in users can delete their own photos and comments&lt;/li&gt;
&lt;li&gt; Logged in users can &#39;like&#39; each photo a maximum of 1 time *- this bit looks so simple but is actually the hardest feature of all!*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Phew. What a weekend! We’re now in advanced Javascript week so it’s time to swap those gems for curly brackets, APIs and callbacks again. Monday mainly consisted of installing and playing with strangely named things like Bower, Grunt and Node.&lt;/p&gt;

&lt;p&gt;I’ve also started peer reviewing juniors’ weekend challenges. It was great to be able to pass on some of my knowledge and experience to help people. People who are just starting out but at the same time just 6 weeks behind me. How far we’ve come in that short time…&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Jul 2015 21:55:14 +0100</pubDate>
        <link>http://natstar93.github.io//week8/2015/07/27/day-36.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week8/2015/07/27/day-36.html</guid>
        
        
        <category>week8</category>
        
      </item>
    
      <item>
        <title>Day 35 | Week 7 learning plan</title>
        <description>&lt;p&gt;&lt;strong&gt;Most Important Things I Learned:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Rails! I am feeling a lot more familiar with rails after the weekend challenge&lt;br /&gt;
• Stuff about databases - how tables are joined and accessed&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Things I Struggled With The Most:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Active records associations part of the tutorial&lt;br /&gt;
• Getting everything done. I finished the week’s walkthrough on Saturday so didn’t start the challenge until later than usual&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Changes I Plan to Make Next Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Get a better balance between pace and understanding&lt;br /&gt;
• Have an AH review - didn’t get round to it last week&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other Experiences or General Feedback This Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• I still have 4 people to pair with (Jon N, Lucy O, Rob, Paul), but I keep being put with people I’ve already been with. I would ideally like to pair with everyone. Would it help to send round a google form so everyone can fill in the names of everyone they HAVEN’T paired with yet rather than working it out from the ‘have paired with’ matrix? I am happy to organise this if you like.&lt;br /&gt;
• Having lots of fun as usual :) Pretty pleased at some of the things we’re now able to do. I found rails a bit of a struggle last week but the weekend challenge really helped a lot.&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jul 2015 21:15:22 +0100</pubDate>
        <link>http://natstar93.github.io//week7/2015/07/24/day-35.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week7/2015/07/24/day-35.html</guid>
        
        
        <category>week7</category>
        
      </item>
    
      <item>
        <title>Day 34 | Off the Rails II (the sql)</title>
        <description>&lt;p&gt;The entire cohort have been totally confused by database associations for the last two days. The principle of what we’re trying to do makes sense, but accurately setting up relationships and expressing them or their related methods in Ruby - in the correct model or controller as appropriate -is driving us up the wall. We’re learnt that you can create relationships through tables, and you express them in ways like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Class User  &amp;lt; ActiveRecord::Base
has_many :reviewed_restaurants, through: :reviews, source: :restaurant
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This sets up a relationship using ‘reviewed_restaurants’ which doesn’t actually exist as a model or database table. But that’s ok, because you’ve expressed what it is and can therefore use it in a method! Crazy stuff! And that’s not the end of it. You have to make sure you write tests for all of this first of course, to make sure the code you’re about to write builds things in the database correctly. You also have to check that the thing you created is the right kind of thing using weird sounding tests such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;it &#39;builds a like&#39; do
  expect(like).to be_a Like
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Is this a unit test or a strange riddle?&lt;/p&gt;

&lt;p&gt;Now for your next trick, how about taking that method you created earlier based on a made-up non-existent table and improving it by moving the logic into a module so it’s nice and encapsulated and never gets as far as your contoller?&lt;/p&gt;

&lt;p&gt;It seems like this part of the exercise is a combination of half of the stuff we’ve learnt so far. Confusing as hell, but once you’ve cracked it you reap the rewards. And that, my friends, sort of sums up the course in general!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Jul 2015 22:21:05 +0100</pubDate>
        <link>http://natstar93.github.io//week7/2015/07/23/day-34.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week7/2015/07/23/day-34.html</guid>
        
        
        <category>week7</category>
        
      </item>
    
      <item>
        <title>Day 32 | Off the Rails</title>
        <description>&lt;p&gt;This week is Rails week. Everyone has an opinion on Rails, ranging from ‘Easier and better than Sinatra’ to ‘I don’t understand how it’s doing stuff for me’ to ‘I don’t like this Rails Voodoo magic, make it stop!’. There are some very nice features such as the fact that it creates all your routes for you when you generate a model, and this means you can get something up and running very quickly. A lot seems to be a lot going on automatically, which is a bit strange at first. When I installed a gem called Devise, it automatically updated my routes config file without me asking it to.&lt;/p&gt;

&lt;p&gt;The user management functionality is super easy to set up, but we came unstuck when trying to implement Facebook login. It was one of those parts of the tutorial where you just have to take a leap of faith and add a lot of config stuff in without fully understanding what’s going on. That’s the part I don’t like. I’m not sure how I’m meant to fix problems with the login if I don’t fully understand what each bit of code is doing. I think I’m going to have a very exciting evening finding out about the wonderful world of Omniauth!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Jul 2015 20:38:22 +0100</pubDate>
        <link>http://natstar93.github.io//week7/2015/07/21/day-32.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week7/2015/07/21/day-32.html</guid>
        
        
        <category>week7</category>
        
      </item>
    
      <item>
        <title>Day 31 | How to: Host your static site on Heroku</title>
        <description>&lt;p&gt;Hello blog fans. I’ve spent the last couple of days working on the bowling challenge again, and it now includes an interface (HTML, CSS &amp;amp; jQuery). It’s pretty much done at last, so I decided to host it on Heroku &lt;a href=&quot;https://serene-island-1376.herokuapp.com/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Heroku is awesome for hosting applications that run on Ruby, Python and Node servers (amongst others) but what if you want to host a static site that doesn’t need to run on a server? There doesn’t seem to be an option for that…&lt;/p&gt;

&lt;p&gt;I discovered a workaround that lets you host your site using a tiny little bit of PHP:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* Rename your index.html file to home.html
* Create a file named index.php include the following code to reference
  your entry html file

  &amp;lt;?php include_once(&quot;home.html&quot;); ?&amp;gt;

* Git commit and push to Heroku
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sounds simple, but of course it didn’t work first time. Stuff never works first time. It always takes an extra hour and requires reading about 5 stack overflow posts. Here is an idiot’s guide based on a few issues I encountered.&lt;/p&gt;

&lt;p&gt;• Make sure you are on branch ‘master’ and that the work you want to submit lives on branch ‘master’. Heroku won’t process anything pushed from any other branch.&lt;br /&gt;
• Make sure your new little index file definitely ends in .php and not .html, or you will get an error along the lines of &lt;em&gt;Push rejected, no Cedar-supported app detected HINT: This occurs when Heroku cannot detect the buildpack to use for this application automatically&lt;/em&gt;.&lt;br /&gt;
• Make sure your PHP file (index.php) is at the root of your application folder or you’ll get the same error as above.&lt;br /&gt;
• It sounds obvious, but make sure everything is definitely committed.&lt;br /&gt;
• Your stylesheets, javascripts and anything else referenced by your html file (e.g. a local copy of jQuery) will now need to be referenced from the location of the PHP file, which is now living at the root of the application. You might as well move your main HTML file ‘home.html’ up there to the app root too so that your site doesn’t fall apart when you open home.html in your browser.&lt;/p&gt;

&lt;p&gt;And that’s about it, for now. Let me know if you encounter any other errors doing this and I will add them to the post!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jul 2015 23:19:22 +0100</pubDate>
        <link>http://natstar93.github.io//week7/2015/07/20/day-31.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week7/2015/07/20/day-31.html</guid>
        
        
        <category>week7</category>
        
      </item>
    
      <item>
        <title>Day 30 | Week 6 learning plan</title>
        <description>&lt;p&gt;&lt;strong&gt;Most Important Things I Learned:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Constant communication is really important in a group situation, to make sure the project is moving in the right direction and to make sure bad merge conflicts don’t happen&lt;br /&gt;
• How to be agile and cut features/change plans for features when new information comes to light&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Things I Struggled With The Most:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Ajax cross origin issues. AHHHH&lt;br /&gt;
• Keeping motivation up while redoing a previous project&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Changes I Plan to Make Next Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Start doing Ruby katas again&lt;br /&gt;
• Name functions/methods in a more descriptive way&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other Experiences or General Feedback This Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• I loved working on the Makerthon project! Great idea to introduce it in week 6, as it allows you to get that valuable experience of working in teams, agile development of an MVP and github stuff.&lt;br /&gt;
• I found the ‘extend Chitter’ task (mon-tue) hard to get into. I wouldn’t have chosen to work on Chitter again since we’ve only just done it and I put a lot of work into the first one. People wanted to start from scratch so we started by redoing everything and it was difficult to care as much about it this time around. We also now know that Rails is going to come along and blow our sign up processes out of the water with the ‘devise’ gem. The value I got out of the task was fully understanding how some bits worked, especially datamapper, but it made me feel that I hadn’t done as good a job as I thought the first time around since I still had questions around how some bits worked. I perfected my original challenge at various points during the two days (based on Ben’s 1:1 feedback) as a way of making sure I understood everything, but I think maybe this was a bit selfish as I wasn’t pairing properly on the task at hand.&lt;br /&gt;
• I probably would have preferred to spend the first two days revisiting challenges on my own and then doing the Makerthon for the rest of the week.&lt;br /&gt;
• Seniors? Whaaat?&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Jul 2015 15:14:22 +0100</pubDate>
        <link>http://natstar93.github.io//week6/2015/07/17/day-30.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week6/2015/07/17/day-30.html</guid>
        
        
        <category>week6</category>
        
      </item>
    
      <item>
        <title>Day 28 | Makerthon part 1</title>
        <description>&lt;p&gt;A makerthon is basically a mini hackathon, except there’s no prize at the end. The aim is to build a fully tested product in an agile way, using kanban and ensuring regular team stand ups are held. It’s better to create something that works and has just a couple of features than something that has a lot of half-built over-ambitious features.&lt;/p&gt;

&lt;p&gt;Ideas were pitched and voted on, and I was pleased to end up in the Music Quiz team based on my votes. We chose to read up on kanban, gihub collaboration and the learning objectives before starting our meeting, which was a wise move I think. Our planning meeting was very successful and gave us a solid MVP plan to work on. Kate and I made up the back end team and the two Lucys started researching feature testing for JavaScript.&lt;/p&gt;

&lt;p&gt;The backend for the MVP turned out to be fairly simple initially, with the Game function keeping track of score and telling the front end when the quiz had terminated. We started researching the Soundcloud API and tried to figure out whether we could get tracks to play without displaying their title and artist name. The front end team were having some difficulties with feature testing. It turns out there isn’t much in the way of feature testing for Javascript and we’re hoping we find out more about it in advanced JS week. Another problem was that the front end was not using the back end outputs in the way we had presumed. I’m starting to think maybe stand ups don’t cut it when it comes to collaborating on a project such as this. Going through the code base as a team might be a necessary complimentary activity.&lt;/p&gt;

&lt;p&gt;I realised that the data for the quiz really should be coming through the back end. It sounds really obvious but I think somewhere along the way we confused ourselves by thinking about two things: that the front end displays the questions and options, and that the recent thermostat project worked by pulling API data into the front end to simply display it. Our program does more than that though, and needs the backend to know the answer to each question (a, b or c) in order to compare it to user input, so it makes more sense for it to accept the quiz data initially. I started looking at how the back end could organise the data into various arrays and supply the correct outputs to the front end for each round. By the end of the evening I had a little working ‘MMVP’ which I’m looking forward to sharing with the group.&lt;/p&gt;

&lt;p&gt;After proceeding very cautiously with Github we managed to successfully collaborate on a repo and pull and push to and from development branch and feature branches. We ended the day with 0 merge conflicts to sort out and understanding way more about gihub than when we started! It’s important that the same file isn’t worked on by two people at the same time, so communication and knowledge of responsibilities is key. This seems to be a general theme for project work as a whole.&lt;/p&gt;

&lt;p&gt;Here are my notes on how to merge a feature branch:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Commit changes whilst still on your feature branch
Checkout to your local development branch
Pull from Github development branch to get latest version of codebase
Merge local feature branch into local development branch
Push changes to Github 

  561  git add .
  562  git commit -m &#39;Added game termination logic&#39;
  563  git checkout development
  564  git pull origin development
  565  git merge score-logic
  566  git push origin development
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Jul 2015 23:07:40 +0100</pubDate>
        <link>http://natstar93.github.io//week6/2015/07/15/day-28.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week6/2015/07/15/day-28.html</guid>
        
        
        <category>week6</category>
        
      </item>
    
  </channel>
</rss>
