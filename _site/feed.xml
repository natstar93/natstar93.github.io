<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Diary of a Developer</title>
    <description>A blog following my journey through Makers Academy and beyond...
</description>
    <link>http://natstar93.github.io//</link>
    <atom:link href="http://natstar93.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 03 Mar 2016 22:17:18 +0000</pubDate>
    <lastBuildDate>Thu, 03 Mar 2016 22:17:18 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Refactoring to ES6 and back again</title>
        <description>&lt;p&gt;I’ve been doing a lot of linting on a repo that recently got upgraded to Node. This mainly involves changing things to the ES6 syntax since the code was written in ES5. I used airbnb eslint to help me flag stylistic errors and remaining ES5 code.&lt;/p&gt;

&lt;p&gt;Here are a couple of ways of refactoring an ES5 setTimeout function which I found particularly interesting.&lt;/p&gt;

&lt;h3 id=&quot;original-es5-code&quot;&gt;Original ES5 code&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;handleReconnect() {
  const reconnectMs = this.reconnectSeconds * 1000;
  console.log(`attempting to reconnect to rabbit. in ${reconnectMs}ms`);
    this.reconnect = setTimeout(function() {
      this.internalConnect();
    }.bind(this), reconnectMs);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Linting error: func-name Missing function expression name&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I changed it to a named function and got…&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Linting error: prefer-arrow-callback Unexpected function expression&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h3&gt;

&lt;p&gt;Oook let’s use a fat arrow callback then.&lt;/p&gt;

&lt;p&gt;ES6 fat arrow functions automatically capture the value of &lt;em&gt;this&lt;/em&gt; from the outer, parent function. The value of &lt;em&gt;this&lt;/em&gt; inside an arrow function will always be the same as the value of &lt;em&gt;this&lt;/em&gt; in the arrow’s enclosing function.&lt;/p&gt;

&lt;p&gt;There is no need to use &lt;code&gt;const self = this&lt;/code&gt;, and you can deeply nest arrow functions to preserve &lt;em&gt;this&lt;/em&gt; through a series of asynchronous operations.&lt;/p&gt;

&lt;p&gt;So the above code can be simplified to the below ES6 function. It is much easier to read and means we do not have to use the bind function to bind the value of this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;handleReconnect() {
  const reconnectMs = this.reconnectSeconds * 1000;
  console.log(`attempting to reconnect to rabbit. in ${reconnectMs}ms`);
  this.reconnect = setTimeout(() =&amp;gt; this.internalConnect(), reconnectMs);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then… a &lt;a href=&quot;https://about.me/riccardocoppola&quot; target=&quot;_blank&quot;&gt;senior dev on my team&lt;/a&gt; pointed out that in this case since the internalConnect function was completely defined elsewhere in the file (and not changed by handleReconnect), a callback was not actually needed. We could just pass the function as an argument, remembering to bind &lt;em&gt;this&lt;/em&gt; again since the fat arrow function was no longer being used.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;handleReconnect() {
  const reconnectMs = this.reconnectSeconds * 1000;
  console.log(`attempting to reconnect to rabbit. in ${reconnectMs}ms`);
  this.reconnect = setTimeout(this.internalConnect.bind(this), reconnectMs);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Either way is valid, but the second is a little neater.&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcQ7ONJR-u9MiHrqeZpMzTqcaik9BrW-XskBAod45N6X1B2mXOGj&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Mar 2016 12:50:13 +0000</pubDate>
        <link>http://natstar93.github.io//refactoring,/javascript/2016/03/02/refactoring.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//refactoring,/javascript/2016/03/02/refactoring.html</guid>
        
        
        <category>refactoring,</category>
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Render Testing and Debugging on Mobile Devices</title>
        <description>&lt;p&gt;&lt;em&gt;Debug all the things!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’ve been spending quite a lot of time render checking and debugging various features recently. Unit and acceptance tests are essential for assessing the functionality of your application, but rendering is an important thing to check too and needs robust methods of testing. This post is an overview of each tool I used, culminating with instructions on how to use Charles Web Proxy Debugger to set conditions.&lt;/p&gt;

&lt;h4 id=&quot;chrome-dev-tools&quot;&gt;Chrome Dev Tools&lt;/h4&gt;

&lt;p&gt;This doesn’t really require any introduction but here’s one anyway for completeness. Chome Dev Tools provide a basic overview of how your app looks on a variety of smartphones, tablets and desktop screen sizes and are a developer’s best friend when it comes to diagnosing and fixing most CSS problems.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pros: Quick and easy to use, included with your browser already, easy to amend scripts using Fiddler/Charles web proxy, great for development.&lt;/li&gt;
  &lt;li&gt;Cons: Not 100% accurate. You will need to test on actual devices or emulators if you want to be sure there are no problems before pushing to production.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;xcode-simulator&quot;&gt;Xcode Simulator&lt;/h4&gt;

&lt;p&gt;This can be used to emulate a number of different Apple devices on all sorts of versions of OSX. So far the rendering seems to be true to life and the device applications are updated in real time so you know you’re using the most current versions (when Apple broke Safari the other day it also broke on the emulator, which was great fun). Since the simulator runs on your local machine you can just serve to localhost and go. It doesn’t take &lt;em&gt;that&lt;/em&gt; long to load, but it’s not exactly the quickest either. You can use Charles or Fiddler to proxy your scripts as you would in Chrome, too.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pros: Mirrors real device well, runs on local machine&lt;/li&gt;
  &lt;li&gt;Cons: Load time can get annoying if you are having to re-render something frequently, supports Apple devices only&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;android-studio&quot;&gt;Android Studio&lt;/h4&gt;

&lt;p&gt;I’d be lying if I said I knew a great deal about this tool. I was swiftly warned away from it by one of the developers in my team, who explained that the rendering is not necessarily representative of the device being emulated. The fact that the tool may not render things correctly made it unfit for purpose.&lt;/p&gt;

&lt;h4 id=&quot;iphone--safari-on-mac&quot;&gt;iPhone + Safari on Mac&lt;/h4&gt;

&lt;p&gt;Another Apple only solution (requires a Mac too). It allows you to debug your app on iPhone/iPad and comes with a Console and Network tab. It’s pretty easy to set up. First switch the Web Inspector on on your device by navigating to &lt;code&gt;Settings &amp;gt; Safari &amp;gt; Advanced&lt;/code&gt; and toggling Web Inspector to the On position. Load up the page you want to meddle with on your device. Then plug your device into the Mac using a lightning cable and open Safari. In the Safari menu go to &lt;code&gt;Develop &amp;gt; [Device Name] &amp;gt; [Name of page]&lt;/code&gt;. You will then be presented with the markup for your page, CSS rules and basically all the things you’d expect from Chrome dev tools. Change the code and watch your page update in real time :)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pros: Uses actual devices, debugging possible, breadth of tools that you would normally associate with Chrome&lt;/li&gt;
  &lt;li&gt;Cons: CSS rules tricky to edit, not as intuitive as Chrome, Apple devices only, Apple product overload&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;any-device-you-like--charles-proxy-debugger&quot;&gt;Any Device You Like + Charles proxy debugger&lt;/h4&gt;

&lt;p&gt;This setup will allow you to view a page on your device of choice and update its scripts. It means you can edit your test conditions (e.g. particular values for data being passed in) and view the outcome on any device you choose. Lovely stuff.&lt;/p&gt;

&lt;p&gt;First, you need to &lt;a href=&quot;http://www.charlesproxy.com/documentation/using-charles/ssl-certificates/&quot;&gt;download an SSL certificate&lt;/a&gt; for your particular device or OS. I used the &lt;a href=&quot;http://www.charlesproxy.com/documentation/additional/legacy-ssl-proxying/&quot;&gt;legacy certificate&lt;/a&gt; even though I’ve got the most up-to-date version of Charles and it worked just fine. Make sure both your device and your computer are on the same Wifi network. Then go to your phone’s Wifi settings and add a proxy. This is fairly straighforward on iPhone, but Android make it tricky by hiding things. If you’re on Android, hold down on the name of the Wifi network to make a dialogue box pop up, then click Modify Network. Select ‘Show advanced options’ and the proxy settings should appear. Enter your computer’s IP address and the port number Charles is using (more than likely to be 8888, but check in Charles at &lt;code&gt;Proxy &amp;gt; Proxy Settings &amp;gt; Proxies&lt;/code&gt;, and yes that is the real path).&lt;/p&gt;

&lt;p&gt;Now you should have Charles up and running. Check that a) the page loads on your device and b) when said page loads, the Structure panel in Charles picks up the activity. If either of these don’t happen, check your device and computer are on the same Wifi network and that your proxy settings are correct.&lt;/p&gt;

&lt;h5 id=&quot;charles-rewrite-tool&quot;&gt;&lt;em&gt;Charles Rewrite tool&lt;/em&gt;&lt;/h5&gt;

&lt;p&gt;This is a very handy tool that lets you modify your requests and responses so you can double check everything is rendering correctly under different conditions. Open up &lt;code&gt;Tools &amp;gt; Rewrite&lt;/code&gt;. Here you can add a new ‘Set’ for each set of conditions you want to apply. In the Locations menu add the URL(s) of the page you want to modify and then start adding the Rules in. In my case I substituted the existing value of PortalName in a tag object, to allow a test banner to render for closer inspection on Android.&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;For simple rendering checks whilst developing, Chrome dev tools are awesome and BrowserStack has a huge suite of browsers and devices. If you want to make sure things look pixel perfect on every device, load up your test environment on real devices where possible and on emulators of the devices you don’t own. If you want to check elements that only appear when script modificaions are made, use Fiddler on Windows and Charles on Mac using the proxy instructions above.&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Feb 2016 21:54:17 +0000</pubDate>
        <link>http://natstar93.github.io//testing,/debugging/2016/02/02/render-testing.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//testing,/debugging/2016/02/02/render-testing.html</guid>
        
        
        <category>testing,</category>
        
        <category>debugging</category>
        
      </item>
    
      <item>
        <title>iframe iPhone 6 bugs and quirks</title>
        <description>&lt;p&gt;A lot of my time over the past couple of days has been spent trying to work out why a &lt;a href=&quot;https://www.doubleclickbygoogle.com/solutions/revenue-management/&quot; target=&quot;_blank&quot;&gt;Google DoubleClick for Publishers (DFP) banner&lt;/a&gt; was rendering perfectly and responsively on desktop browsers and most mobile phone devices but not on the iPhone 6 range.&lt;/p&gt;

&lt;p&gt;DFP banners are normally used to display banner adverts, but at Trainline we use them to show messages relating to service disruptions e.g. ‘East Croydon station sucks and is experiencing massive delays’ (not a real disruption notification message).&lt;/p&gt;

&lt;p&gt;Here is one of those banners on an iPhone 6S. It thinks it’s a desktop banner and is trying to escape off the side of the screen :(&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.natalie-akam.com/images/disruption.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The problem was with the &amp;lt;iframe&amp;gt; element which is inserted by DFP and wraps the user’s inserted banner code. Unfortunately just telling it to have a width of 100% doesn’t cut it for iPhone 6. Safari will allow the content to take on its full width and stretch the iframe banner out. But only for iPhone 6 devices. Weird. It took a while to diagnose the problem and find a workaround, but the below CSS hack fixed it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iframe {
  width: 1px;
  min-width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the iframe width is set to 1px then overridden. This works well on iPhone 6 and allows the iframe to achieve a lovely responsive 100% width on everything. Happy days!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Jan 2016 17:12:28 +0000</pubDate>
        <link>http://natstar93.github.io//node/2016/01/29/iframe-bug.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//node/2016/01/29/iframe-bug.html</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>I love it when a plan goes completely wrong!</title>
        <description>&lt;p&gt;I’ve spent the last few days working through a MEAN tutorial I started months ago but never made that much progress on. I remember my poor pair partner David’s face when I exclaimed ‘oh, looks like I don’t have Node or Java installed on this laptop’ and the resulting 2 hours of installations and issues hampering our efforts to get to the &lt;a href=&quot;https://thinkster.io/mean-stack-tutorial#beginning-node&quot;&gt;interesting bit&lt;/a&gt;. It never really got off the ground. Having to redo the angular bits of the tutorial and ugh… the basic styling section, was a bit soul-destroying but at least it was over quickly. Like a bad nightmare. Happily, I’ve now moved on to the part where you get to play around with databases (fun) and the node/express/routing/debugging part (vaguely relevant to my job AND fun).&lt;/p&gt;

&lt;p&gt;I had forgotten databases could be a lot of fun. I even laughed once when Zeina was reminiscing about a particular week at Makers and merrily concluded ‘and that was when I realised I loved databases’. Mongo is a pretty simple non-relational database and I’m pretty sure its simplicity will lead me to use it in projects in the future. I nearly wrote ‘hackatons in the future’ there but then remembered that hackathons usually involve pretending you have a database and not just a crappy JSON file you’ve faked and that the judges will &lt;strong&gt;never ever see&lt;/strong&gt;. Anyway… I’ve now got the models, a little database that stores Posts and their related Comments and uses a couple of little database methods to increment upvotes on each when told to do so. I’m using Node and Express for the routing and associated error handling and have been finding about some new javascript methods and parameters… (see last section)&lt;/p&gt;

&lt;p&gt;The best thing about this tutorial has been the debugging side of things. It’s easy to zone out and become demotivated when typing out the lines of code the tutorial tells you to type. But then.. occasionally you make a mistake or misinterpret something. You dive into the database and realise that it doesn’t look like it should, or you run npm start and the app crashes. Bring on stack traces, stack overflows, console.log() here there and everywhere and setting up some extra routes in order to work out what’s going on. Suddenly you’re actually thinking and manipulating stuff to do what you need it to do, and celebrating when you work each little problem out with increasing ease. Happily, I now get to do this kind of stuff EVERY DAY at work, just with a little more pressure to make sure I a) get things done fairly quickly and b) don’t commit something stupid to the master branch of a real site.&lt;/p&gt;

&lt;p&gt;I restarted this tutorial with the aim of redoing the front end in React, which I’ll be using more and more in my job this year. Once I’ve cracked that, I’m hoping to think up a new React+Node+Mongo project to completely test drive. Happy days.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stuff I have learnt by doing this tutorial&lt;/strong&gt; (Enough waffle, get to the technical bit)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;next &lt;em&gt;- (parameter)&lt;/em&gt;&lt;br /&gt;
Explained &lt;a href=&quot;http://stackoverflow.com/questions/10695629/what-is-the-parameter-next-used-for-in-express/10695714&quot;&gt;here&lt;/a&gt; but it is an extra node parameter passed in addition to the usual response and request params. It is used to call the next middleware function in the request response cycle, so it’s sort of a callback. You can use it to control flow by breaking out of the code in your route based on whether the condition you’re looking at is satisfied or causes an error. In my code below you can see that next is used to break out and take the error details with it.&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;router.get(&#39;/posts/:post/comments&#39;, (req, res, next) =&amp;gt; {
  Comment.find((err, comments) =&amp;gt; {
    if(err) { return next(err); }
    res.json(comments);
  });
});
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;exec() method&lt;br /&gt;
The exec() method tests for a match in a string. It returns the matched text if it finds a match, otherwise it returns null. Shove this into your console:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;var str = &#39;Hi Nat&#39;;
patt = /Hi/g;
patt.exec(str);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should get back an array containing the matched text as a string. If you change the regex to something that’s not in the string you should get back null. Cool huh?&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jan 2016 21:38:28 +0000</pubDate>
        <link>http://natstar93.github.io//node/2016/01/03/MEAN.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//node/2016/01/03/MEAN.html</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>New years resolutions</title>
        <description>&lt;ul&gt;
  &lt;li&gt;Blog more&lt;/li&gt;
  &lt;li&gt;Mentor at Codebar&lt;/li&gt;
  &lt;li&gt;Attend meetups that provide pizza, beer and JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jan 2016 21:38:28 +0000</pubDate>
        <link>http://natstar93.github.io//2016/01/01/New-year.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//2016/01/01/New-year.html</guid>
        
        
      </item>
    
      <item>
        <title>Node Streams</title>
        <description>&lt;p&gt;Streams are a way of inputting and outputting data. They can be readable or writable (or both) and can be paused and resumed.&lt;/p&gt;

&lt;p&gt;Using the filesystem module we just saw, we can create a stream to read data as below. The data is read in in chunks, so the readStream on data event event is fired multiple times. A counter has been implemented which increments each time another chunk of data is received.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fs = require(&#39;fs&#39;);

var readStream = fs.createReadStream(&#39;lorem.txt&#39;);
readStream.setEncoding(&#39;utf8&#39;);

var counter = 0;

readStream.on(&#39;data&#39;, function(myData) {
  counter ++;
});

readStream.on(&#39;end&#39;, function() {
  console.log(counter);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another event listener is listening for a signal that the data has finished being read, and at this point it outputs the value of the counter variable to the console. You can therefore see how many chunks the data was streamed in.&lt;/p&gt;

&lt;p&gt;Write streams can be created as below&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var writeStream = fs.createWriteStream(&#39;copylorem.txt&#39;);

writeStream.write(&#39;Hello world&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some other useful commands you might like to use with streaming are&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;readStream.pipe(writeStream); // to pipe the data read in straight into the write stream

readStream.pause(); // pauses the reading of the stream
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Oct 2015 20:14:52 +0100</pubDate>
        <link>http://natstar93.github.io//node/2015/10/18/Node_streams.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//node/2015/10/18/Node_streams.html</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>Node fs Module</title>
        <description>&lt;p&gt;File System (fs) is a very useful module that comes with the node installation by default. It can be used to read and write data from the file system on your computer.&lt;/p&gt;

&lt;p&gt;Below is an example of how it can be used in an asynchronous way. Note the use of ‘utf8’ as a parameter. Node uses a datatype called buffer which represents data in binary. We need the data converted to utf-8 encoding for it to be interpreted properly, so that’s why ‘utf8’ need to be passed in as the encoding parameter. Try running the below without the encoding parameter and your text file will be represented as something like &amp;lt;Buffer 34 92 57 6c 6f 62&amp;gt; instead of nice normal text.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fs = require(&#39;fs&#39;);

fs.readFile(&#39;text.txt&#39;, &#39;utf8&#39;, function(err, data) {
  if(err) {
    console.log(err.code);
  }
  console.log(data);
});

fs.writeFile(&#39;text2.txt&#39;, &#39;some text&#39;, &#39;utf8&#39;, function(err, data) {
  if(err) {console.log(err)}
  console.log(data);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think the above is quite self explanatory as far as explaining how the fs methods readFile and writeFile work, now that we know all about callbacks and asynchronous stuff.&lt;/p&gt;

&lt;p&gt;Here’s an example of a synchronous way of doing the same thing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fs = require(&#39;fs&#39;);

var myRead = fs.readFileSync(&#39;text.txt&#39;, &#39;utf8&#39;);
console.log(myRead);

var myWrite = fs.writeFileSync(&#39;text2.txt&#39;, &#39;text here&#39;, &#39;utf8&#39;);
console.log(myWrite);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, that wasn’t too hard. I think we’re ready for &lt;a href=&quot;../18/Node_streams.html&quot;&gt;streams&lt;/a&gt; now.&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Oct 2015 13:31:45 +0100</pubDate>
        <link>http://natstar93.github.io//node/2015/10/17/Node_fs.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//node/2015/10/17/Node_fs.html</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>Node Events</title>
        <description>&lt;p&gt;Callbacks are great, but when there are more than two events and/or they need to be called multiple times, events are used. They’re more flexible and more powerful… Plus you can kind of switch them on and off as you please.&lt;/p&gt;

&lt;p&gt;Instead of using asynchronous functions which execute upon the return of a result, a number of event listeners are set up to watch for certain signals or state changes. These listeners are also known as Observers. Node.js has a module called ‘events’ which needs to be required in order for this all to work.&lt;/p&gt;

&lt;p&gt;Here’s an example of event handlers and emitters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var events = require(&#39;events&#39;);
var eventEmitter = new events.EventEmitter();

var myFirstEventHandler = function first() {
  console.log(&#39;First event handler fired&#39;);
}

eventEmitter.on(&#39;firstEvent&#39;, myFirstEventHandler);

eventEmitter.emit(&#39;firstEvent&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run that with node and see what happens…&lt;/p&gt;

&lt;p&gt;Also, check out what gets returned here if you type each line into a REPL environment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; eventEmitter.on(&#39;firstEvent&#39;, myFirstEventHandler);

{ domain: null,
  _events: { firstEvent: [Function: first] },
  _maxListeners: 10 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The event emitter is returned, so this can be used for chaining calls together.&lt;/p&gt;

&lt;p&gt;Event listeners can be added and removed from the array of event listeners using methods such as &lt;code&gt;eventEmitter.addListener(event, listener)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s an example of removeAllListeners in use.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(counter === 15) {
  readStream.removeAllListeners(&#39;data&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a full list please see the &lt;a href=&quot;https://nodejs.org/api/events.html&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next up, the &lt;a href=&quot;../17/Node_fs.html&quot;&gt;file system module&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Oct 2015 18:31:45 +0100</pubDate>
        <link>http://natstar93.github.io//node/2015/10/16/Node_Events.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//node/2015/10/16/Node_Events.html</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>The wonderful world of Node</title>
        <description>&lt;p&gt;I’ve been having a lot of fun learning about Node.js this week. I’m excited to be finally working with JavaScript on the server side, after doing quite a lot of &lt;a href=&quot;https://github.com/natstar93/clothing_shop&quot; target=&quot;blank&quot;&gt;JavaScript things on the front end recently&lt;/a&gt;. (Blog post on React.js coming soon too).&lt;/p&gt;

&lt;h2 id=&quot;so-what-is-nodejs&quot;&gt;So, what is Node.js?&lt;/h2&gt;

&lt;p&gt;It’s a cross-platform runtime environment for developing server-side web applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What the hell does that mean?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Every language has a runtime environment that runs the language and processes it. You might have had to download or update your Java environment in the past, for example, in order to run a certain program. That would have been because something you were running was written in Java. Your computer needed to update your out-of-date/non-existent Java runtime environment in order to interpret and process the Java code in that program.&lt;/p&gt;

&lt;p&gt;JavaScript was originally developed for use in the browser, rather than for the server side, so its runtime environment came a bit late to the party. A few options were developed but Node.js proved to be the most popular because it was the fastest and processed things in the most efficient way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why is Node.js faster and more efficient?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Node.js is a single threaded application which means it processes one command at a time. It uses events and callbacks in a ‘non-blocking’ way to achieve concurrency of processes. This will all be explained below… but basically it means it can do a lot of things at once despite being quite lightweight.&lt;/p&gt;

&lt;h3 id=&quot;callbacks&quot;&gt;Callbacks&lt;/h3&gt;

&lt;p&gt;It’s worth mentioning callbacks here since I don’t think I’ve written about them previously. Callback functions are executed at the end of a given task. They’re useful as they mean that the program can go off and do something else in the meantime, and when the first task has been completed the program receives a signal that task 1 has delivered the required output and is ready to execute the next part using that output. This kind of setup is known as a non-blocking model.&lt;/p&gt;

&lt;h4 id=&quot;example-of-blocking&quot;&gt;Example of Blocking&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var fs = require(&#39;fs&#39;);
var data = fs.readFileSync(&#39;nat.txt&#39;)

console.log(data.toString());
console.log(&#39;Something else&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; Whatever stupid data is in my file
&amp;gt; Something else
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example the data file will be read and the result outputted, then after all that’s done the program will move on to the second console.log and output the string ‘Something else’. So the program has to wait for the first command to be completely executed before it handles something else, even if that first command is waiting for something external. Hmm, doesn’t sound too efficient.&lt;/p&gt;

&lt;h4 id=&quot;example-of-non-blocking-using-callbacks&quot;&gt;Example of Non-Blocking, using callbacks&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var fs = require(&#39;fs&#39;);

var data = fs.readFileSync(&#39;nat.txt&#39;, function (error, data) {
  if (error) return console.log(&#39;error&#39;);
  console.log(data.toString());
});

console.log(&#39;Something else&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; Something else
&amp;gt; Whatever stupid data is in my file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example the string ‘Something else’ will actually be outputted first, while the program is waiting for the data to all be read in from the nat.txt file. Once the data has been read it will be logged. If the data file cannot be read, an error object is passed back so you can log an error message instead.&lt;/p&gt;

&lt;p&gt;So, yaaay for callbacks. Lets move onto &lt;a href=&quot;../16/Node_Events.html&quot;&gt;Events&lt;/a&gt; next…&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Oct 2015 01:31:45 +0100</pubDate>
        <link>http://natstar93.github.io//node/2015/10/15/NodeJS.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//node/2015/10/15/NodeJS.html</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>Day 55 | Thanks for the memories</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://www.natalie-akam.com/Blog/images/group_pic.jpg&quot; /&gt;
&lt;strong&gt;16 of the 24 amazing people I spent my summer with&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am feeling a mixture of emotions today. June 2015 have now officially graduated and I’m so immensely proud of what all the groups produced for their final projects and of the journey we had together. All six groups’ presentations went without a hitch and we proved that together we can create some amazing things and overcome all sorts of barriers to get there. Graduation night was a huge celebration of our achievements and of the fun we’ve had in the last 11 weeks with our cohort and the fantastic staff.&lt;/p&gt;

&lt;p&gt;I haven’t blogged this week due to obvious time constraints, but our project really started to come together from Sunday onwards and in the end we somehow created with something bigger and better than we expected, and it looked beautiful too. At times I was so exhausted but it was all worth it in the end. After two frankly horrendous practice presentations on Friday, each team member put their all into making their part the best they could, and when we came off stage we were all riding a wave of elation. Seeing each member of your beloved cohort absolutely rock it too just puts the icing on the cake!&lt;/p&gt;

&lt;p&gt;These times are tinged with immense sadness too though. We had to say goodbye to Jack (aka Captain America, aka the guy who brought the party to Makers Academy) at the end of the night as he left for his flight home. There will no doubt be a couple more tearful goodbyes in coming weeks too, which I’m not looking forward to. Jack’s departure signals the start of the disbandment of a very special group who were complete strangers 11 weeks ago but have now experienced so many laughs, lows and so much love for each other. I’ve had such an amazing summer and it’s so sad to know that this part of the journey has come to an end so quickly. Some great friendships have been formed and I’m sure we’ll all keep in contact even when we’re all out in the world doing various awesome things.&lt;/p&gt;

&lt;p&gt;Due to the strength of the ever expanding Makers alumni network it seems a lot of alumni end up working together, collaborating on things and even forming startups, so in a way this is not the end. Most of us will be back in for hiring week next week too, which we’ve been warned is very hard work (just carrying on as normal then, really!). A record number of hiring companies are coming in to present to us with the aim of plucking us from the Makers Academy nest to become the awesome developers we now know we can be.&lt;/p&gt;

&lt;p&gt;If anyone reading this is weighing up whether to apply or not, I would say a massive, massive 100% YES! Quit your boring job, throw yourself into it and never look back. I would live it all again in a heartbeat.&lt;/p&gt;

&lt;p&gt;And so ends… the best summer of my life.&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Aug 2015 20:18:45 +0100</pubDate>
        <link>http://natstar93.github.io//week11/2015/08/21/day-55.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week11/2015/08/21/day-55.html</guid>
        
        
        <category>week11</category>
        
      </item>
    
  </channel>
</rss>
