<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Diary of a Developer</title>
    <description>A blog following my journey through Makers Academy and beyond...
</description>
    <link>http://natstar93.github.io//</link>
    <atom:link href="http://natstar93.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 26 Jun 2015 12:19:25 +0100</pubDate>
    <lastBuildDate>Fri, 26 Jun 2015 12:19:25 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Day 14 | Why is my test like an NHS ward? It&#39;s full of bugs</title>
        <description>&lt;p&gt;Today was another great day. Kate and I were super excited to combine forces and create a game which allowed the placement &lt;em&gt;and&lt;/em&gt; striking of battleships. That probably doesn’t sound very exciting but every little win not only resulted in tests going green and passing, we could see our results visually on the local server too. Ok, it probably still doesn’t sound very exciting. I guess it just depends on what you’re into.&lt;/p&gt;

&lt;p&gt;Some real progress was made today and we learnt a load of new stuff about cookies and error handling. Everything is really starting to come together. We managed to implement a multiplayer game and played it using two browsers that each took a cookie to keep track of which browser was being used by which player.&lt;/p&gt;

&lt;p&gt;Our joy at the above successes was marred slightly by our test still not passing. I spent the evening trying to work out why and had a bit of remote help from Mihai, an member of the awesome Makers alumni.&lt;/p&gt;

&lt;p&gt;I’ve learnt so much about debugging in the last few days I’m starting to embrace these problems. I wouldn’t say I exactly enjoy seeing error messages, but now I have more ideas on how to go about trying to identify issues and fix them, which is very satisfying. I don’t spend so much time feeling annoyed and scratching my head whilst looking at the error messages, hoping they’ll go away. Following BDD ensures that the problems are small and managable too. If you do it correctly and rigourously you can be quite confident your problem originates from the part you’ve just implemented, not something you should have tested earlier.&lt;/p&gt;

&lt;p&gt;Mihai identified that the problem was definitely with the testing, not the code, and told me how to run just the failing test on its own. I did just that and it went green at last! This prompt lead me to realise that one or more other tests must be interfering, i.e. it/they had set something that needed to be reset before any other tests were initialised. This is a bit of a breakthrough. I haven’t fixed the issue yet (will save that for tomorrow when Kate is there), but the more important outcome is that I know WHY the problem is happening and what approach we need to take to rectify it.&lt;/p&gt;

&lt;p&gt;Great week :) Makers &amp;lt;3&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Jun 2015 23:50:44 +0100</pubDate>
        <link>http://natstar93.github.io//week3/2015/06/25/day-14.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week3/2015/06/25/day-14.html</guid>
        
        
        <category>week3</category>
        
      </item>
    
      <item>
        <title>Day 13 | Looking up</title>
        <description>&lt;p&gt;Today was a pretty good day. For the last week or so I’ve been a bit worried about whether I’ve been understanding enough and whether I’ve been implementing the concepts correctly but today I feel pretty good about everything! The three things that really pleased me today were my 1:1, making some real progress with this week’s work and some chats and tips from the awesome alumni helpers. So my blog post is basically about those things in turn.&lt;/p&gt;

&lt;p&gt;I’ve been looking forward to my 1:1 since Monday. Each week we sign up for 1:1s with a coachineer to discuss how the weekend challenge was. I had so many questions and doubts after last weekend’s, so was happy for the opportunity to get some feedback. The main advice I gained was that the implementation doesn’t have to be perfect the first time you have a go at it. Junior (and even senior) devs don’t get it right first time but will then go back and try another approach based on their learnings. It’s better to have had a go than to have spent a long time planning things out and have tried nothing. It’s also better to do a hard reset after 3 commits than after a hundred, so questioning what you’re doing at all times is really important! The Single Responsibility Principle is the most important thing to bear in mind. As long as each method only does one thing and they’re all named correctly it will be easier to see how things fit into place.&lt;/p&gt;

&lt;p&gt;Other points that came up were:&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Methods should have one word names.&lt;/strong&gt;
This can flag if the method is definitely supposed to belong to that class or not&lt;br /&gt;
e.g. my add_dishes class should just be add, which will help determine if add is the responsibility of that class&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Give classes and methods very specific names.&lt;/strong&gt;
So that you don’t get confused about what their purpose is…&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;No overly fancy code.&lt;/strong&gt; Keep it simple. Simple == readable. I was really proud of the following neat little line (Codewars people seem to love this kind of stuff), but when my coachineer asked me to explain it it took me a minute or two to remember! A simpler code snippet with explicit names for variables would have explained itself.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@dishes.map{ |k,v| &quot;#{k} (£#{&#39;%.2f&#39; % v})&quot;}.join(&#39;, &#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;• &lt;strong&gt;Try not to output strings (apart from when raising errors).&lt;/strong&gt; Symbols are usually a good bet. Text is outputted to the interface when you start developing the fron end parts properly. Which leads nicely on to my next point…&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Ruby will make more and more sense as we progress through other topics.&lt;/strong&gt; I’m starting to get a better picture already through studying views, controllers, REST and all the http request stuff we’re doing at the moment.&lt;/p&gt;

&lt;p&gt;The battleships front end implementation went very well today. The tests are lovely (and are all passing) and the game interface is shaping up nicely and doing what it’s supposed to do. (It doesn’t look beautiful, but I’m resisting the temptation to bash out a quick stylesheet as I know I’ll get in trouble for doing something that’s not an MVP!). Drawing diagrams of what messages you want to pass to the server and get back really helped with all this. I left feeling really pleased with what we’d produced and the BDD approach we followed. All the more so because of the blockers we ran into and overcame. Makers always say that trying, failing and overcoming is one of the best ways to learn.&lt;/p&gt;

&lt;p&gt;We had a few visits to the alumni help desk today which were fantastic. Sarah in particular helped a lot by never providing the direct answer to a problem, but asking us questions and prompting us to use particular debugging methods in order to work the problems out ourselves. I understand so much more than I would have had I been told the answer. For example when an error of ‘object has nil class’ was being returned, we wrote code to output all of the objects used by that method and quickly identified the one which was behaving incorrectly. The detailed examination of error messages and ways to debug we practiced are really crucial and will transcend other languages and technologies.&lt;/p&gt;

&lt;p&gt;Can’t wait for tomorrow!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;

</description>
        <pubDate>Wed, 24 Jun 2015 20:44:37 +0100</pubDate>
        <link>http://natstar93.github.io//week3/2015/06/24/day-13.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week3/2015/06/24/day-13.html</guid>
        
        
        <category>week3</category>
        
      </item>
    
      <item>
        <title>Day 12 | Jen, this box is the internet</title>
        <description>&lt;p&gt;This week we’re learning about a newfangled invention called… the ‘internet’. We played a game in our stand up to help illustrate how http requests are sent out to servers, what controllers and views do to build pages and retrieve app logic, and how responses are sent back to the client. This involved Theo and Lucy (requests and reponses) running between the client and server and pretending to die, and other parties shouting messages. Probably the best way ever to learn the roles of all the constitent parts, and so much more memorable than a diagram full of boxes and arrows!&lt;/p&gt;

&lt;p&gt;The most important points so far which relate to this week’s work (using Sinatra) are:&lt;/p&gt;

&lt;p&gt;HTTP: Requests out, responses back&lt;/p&gt;

&lt;p&gt;Controller uses the following methods:
get: read data
post: change state of system&lt;/p&gt;

&lt;p&gt;Controller takes an incoming request and decides if it needs to consult app logic to illicit a response. It then uses views to build its pages. Views (in our case) contain erb (embedded ruby) which is evaluated and turned into html.&lt;/p&gt;

&lt;p&gt;We are allowed to use a global variable for a new instance of our Game class this week but then never again after that or we’ll be shot. We’re going to find out better ways of allowing our data to persist (cue databases, presumably) next week.&lt;/p&gt;

&lt;p&gt;Ooh and HTML and CSS are due to pop up at various points, yay let’s make everything pretty!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Jun 2015 22:01:40 +0100</pubDate>
        <link>http://natstar93.github.io//week3/2015/06/23/day-12.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week3/2015/06/23/day-12.html</guid>
        
        
        <category>week3</category>
        
      </item>
    
      <item>
        <title>Day 11 | Takeaway injection</title>
        <description>&lt;p&gt;I spent a lot of this weekend working on the TWO challenges we were set. Do you know how long it took me to write the bit of code below? This code is most of the answer to the ‘inject challenge’ (the other bit of the answer was a load of unit tests which I won’t bore you with).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def injector
  iterations = self.length - 1
  result = self[0]
  (1..iterations).each { |x| result = yield result, self[x] }
  result
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The point was to model the &lt;a href=&quot;http://ruby-doc.org/core-2.2.2/Enumerable.html#method-i-inject&quot; target=&quot;_blank&quot;&gt;inject method&lt;/a&gt; for arrays only. Inject basically grabs each item of a series and does whatever the block you’ve specified dicatates using the the next item and the cummulative result of the process so far. It’s very handy for adding things up, multiplying, finding the longest item in a series etc… I now love inject, as it provides me with a shortcut to the above without having to write my own method, which I’ve now realised is a bit of a pain to write!&lt;/p&gt;

&lt;p&gt;The other challenge was to model a takeaway ordering system, then kick out a text from the Twilio API if the order is satisfactory. I read a great deal of an awesome book called &lt;a href=&quot;http://www.poodr.com/&quot; target=&quot;_blank&quot;&gt;Practical Object Oriented Design in Ruby&lt;/a&gt; (POODR) which really consolidated last week’s learnings but also make each decision more painstaking.&lt;/p&gt;

&lt;p&gt;The thing I’ve discovered about OOD is there are no hard and fast rules. This is both it’s beauty and it’s, er.. beast? You have to aim for as simple a structure as possible by ensuring each method has only one responsibility, injecting dependecy to write loosely coupled classes, reversing dependency if necessary, making each method respond to ‘ducks’ (I’ll explain in another post), having abstract interfaces… the list goes on. Most of these do fit nicely together to satisfy the overall aim, but I find it quite hard to ensure none of them are going wrong and that ‘bad things’ are not creeping in at any given time. All the while I have to make sure I’m only doing what the spec requires. Oh, but you should bear in mind likely potential future developments too and assume that various bits need to be amenable to change. But at the same time don’t overcomplicate things. Sometimes it really hurts my head.&lt;/p&gt;

&lt;p&gt;I don’t claim to be an expert in the above YET, but at least the concept of OOD is taking shape in my mind. &lt;strong&gt;I surmise that the result of a well made OO program should have simple, highly readable code that can be worked on and changed in the future by others when requirements change. It should be built to satisfy user stories. Unit tests should be used both to test methods and to guide the developer to realise when a process is too complicated or relies on dependencies that are too rigid. Feature tests at every stage of the process can ensure unit tests are testing something that matters. Oh, and you must be sure to unit test only the behaviour of the class you’re testing and stub out methods that interfere&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After a pretty hectic weekend full of challenges and programming the object that is my mind, it was nice to have a day of following tutorials today. Until the line that basically said ‘now work out how to do everything else (ie the really hard stuff) on your own’. No rest for the wicked, wicked Makers students…&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Jun 2015 18:46:34 +0100</pubDate>
        <link>http://natstar93.github.io//week3/2015/06/22/day-11.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week3/2015/06/22/day-11.html</guid>
        
        
        <category>week3</category>
        
      </item>
    
      <item>
        <title>Day 10 | Summing up the week</title>
        <description>&lt;p&gt;&lt;strong&gt;Most Important Things I Learned:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Pairing is really hard! Tansaku, thanks for your advice on this&lt;br /&gt;
• It’s not about finishing the task, it’s about how much you learnt on the way&lt;br /&gt;
• The seniors struggled too, and most of my cohort are finding this as difficult as I am but the key (I think!) is communicating well with your pair partner and helping each other out&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Things I Struggled With The Most:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• I think I am a person who likes to plan work out, so the agile way of working is quite hard for me! I find it strange working on something when I don’t know what the exact stages ahead are going to be. I can really see the value in the MVP approach though.&lt;br /&gt;
• Retaining all the knowledge from lectures and knowing how to apply them to my code&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Changes I Plan to Make Next Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• I need to be clear to my partner about what I do and don’t understand and clear when I need some time to reread something or understand how the codebase all works before beginning.&lt;br /&gt;
• I need to also get beter at explaining things to others and researching things together when neither of us is sure.&lt;br /&gt;
• Read, read read POODR &amp;amp; WGR and practice implementing the concepts&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other Experiences or General Feedback This Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• The Q&amp;amp;A session with the seniors was really really useful! Many of them said they had thought about dropping out at some point and are all really glad they didn’t. It’s very reassuring to know that everyone finds this difficult and if you have a really bad day you’re not the first one! All the seniors are saying things are falling into place more now which gives me confidence that what I’ve learnt so far is being retained and I will be able to do this!&lt;br /&gt;
• I’m looking forward to being a mentor next week! Happy to have someone who asks loads of questions etc.&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Jun 2015 18:46:34 +0100</pubDate>
        <link>http://natstar93.github.io//week2/2015/06/19/day-10.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week2/2015/06/19/day-10.html</guid>
        
        
        <category>week2</category>
        
      </item>
    
      <item>
        <title>Day 15 | Friday learning plan</title>
        <description>&lt;p&gt;&lt;strong&gt;Most Important Things I Learned:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• How the internet works!&lt;br /&gt;
• How to use BDD, controllers, views and sessions&lt;br /&gt;
• Debugging is awesome. The alumni helpers helped me a lot with this and I’m now a lot more able to identify the cause of issues myself. I’m really happy about how this week went, I definitely found it easier than last week.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Things I Struggled With The Most:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Being ok with moving through the first stages slowly, but I’m glad I did because it really helped me understand everything well and probably helped me progress through the later stuff a bit more rapidly&lt;br /&gt;
• Listening to talks. I don’t know if there’s something wrong with me but after a certain amount of time I find it hard to listen if it’s not related to what I’m doing at that exact time&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Changes I Plan to Make Next Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Not really a change, but persevere as I did this week and keep making sure that both members of a pair are at the same level of understanding about a various topic before progressing onto the next bit of code&lt;br /&gt;
• Make time for yoga!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other Experiences or General Feedback This Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• I quite liked being able to choose pair partners.. I’m not sure how other people feel about this but I enjoyed partnering with someone who was at the same stage of the program and going through all the issues together for the first time at the same pace. I feel like maybe I learnt more that way? Maybe it’s just that this week wasn’t as hard as week 2. You could argue that having random pairings allows more opportunity for people to explain things though. Hmm.&lt;br /&gt;
• I LOVED the game we played in our standup (http://natstar93.github.io/week3/2015/06/23/day-12.html). I feel like I will now retain that info forever&lt;br /&gt;
• Can we have more cereal, bread, milk and fruit on fridays? :)&lt;br /&gt;
• I would prefer if the challenge came out earlier on a Friday. I occassionally have some unavoidable weekend plans (weddings etc) and it would be great to get a good start on it before Friday lunchtime and all the afternoon talks, sessions and er.. beers being handed round&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Jun 2015 13:14:47 +0100</pubDate>
        <link>http://natstar93.github.io//week3/2015/06/19/day-15.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week3/2015/06/19/day-15.html</guid>
        
        
        <category>week3</category>
        
      </item>
    
      <item>
        <title>Day 8 | Promiscuous Pairing</title>
        <description>&lt;p&gt;Quote of the day: “The hiring partners tell us the characteristics they prize most in makers graduates are the ability to pair, work in a team, and be able to learn new things.  Those skills comes from highly promiscuous pairing practices. I’ve paired with over 500 people!”&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Jun 2015 21:10:15 +0100</pubDate>
        <link>http://natstar93.github.io//week2/2015/06/18/day-8.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week2/2015/06/18/day-8.html</guid>
        
        
        <category>week2</category>
        
      </item>
    
      <item>
        <title>Day 7 | A new approach</title>
        <description>&lt;p&gt;&lt;code&gt;A minimum viable product (MVP) is the simplest system you can build to validate the fundamental concept of what you want to build. An MVP sequence is a series of systems of gradually increasing complexity that take you slowly towards a more complex system that&lt;/code&gt; &lt;code&gt;supports more features. There is no absolute way of determining what an MVP should be as it depends on the domain, what you are trying to build, what the stakeholder needs are and so on. However, if you are building lots of components that do not work independently and are looking to hook them together later in order to build a complex system then you are probably doing things wrong.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Due to my designated partner not being around today I ended up working in a three again. Since we were all at different stages we dedided to start again and follow the MVP approach, focussing on really getting the essential functionality down and not worrying about speed.&lt;/p&gt;

&lt;p&gt;This way of working really suits me. I’ve realised I love TDD and getting to consider the logic of each baby step, and writing a good test and getting it to pass is very gratifying! Even if it your program doesn’t do that much yet it’s great knowing you have the foundations of something that has the potential to be awesome.&lt;/p&gt;

&lt;p&gt;I’ve hashed a few things together in my time. My attempt to learn javascript last year resulted in some very cool hand-coded things such as &lt;a href=&quot;http://www.natalie-akam.com/carousel/carousel_template.html&quot;&gt;image carousels&lt;/a&gt; and jquery nav bars. I was thrilled to have created them on my own, but I never really knew if the code I’d written was any good or followed any decent design principles (Nikesh cheerfully confirmed to me in my Makers interview that it definitely didn’t). I’m just happy I’ve now got the opportunity to sort this all out.&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Jun 2015 20:56:22 +0100</pubDate>
        <link>http://natstar93.github.io//week2/2015/06/16/day-7.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week2/2015/06/16/day-7.html</guid>
        
        
        <category>week2</category>
        
      </item>
    
      <item>
        <title>Day 6 | Uphill Battleships</title>
        <description>&lt;p&gt;Week two already? My how time flies! Speaking of flying, this weekend I completed the Airport Challenge which was our cohort’s weekend homework. At first I massively overcomplicated it by adding in methods that I later realised might not be necessary to satisfy the user stories, so I did have to do a bit of refactoring and removing. I’m pretty comfortable with doubles and stubs now, but I think I still need to do a bit of work on identifying appropriate tests. My builds passed (3/3 with 100% test coverage) so I’m happy about that. And I got a new sticker. YAY STICKERS!&lt;/p&gt;

&lt;p&gt;Today we started work on the Battleships project. It is similar in theory to last week’s work, except this time we have no guidance and it uses game logic and is generally a lot more complex!&lt;/p&gt;

&lt;p&gt;We started with a bit of domain modelling and CRC, then got started on building the tests and corresponding methods for a 1 x 1 board and a single ship. That all went well and it seems the things we learnt last week about TDD, logical baby steps, doubles, git pong, attr_accessors, constants, naming, DRY, feature testing and a load of other topics has really stuck and become almost second nature at times. Battleships is a difficult project but we made good progress today and built a lot of cool methods.&lt;/p&gt;

&lt;p&gt;The day was definitely enhanced by partaking in yoga and meditation. I’m really getting into these. At first I was a bit dubious, expecting to feel instant effects like I do after a run or a high intensity Samba class but I’ve realised the benefits are actually a bit more subtle and long lasting. When I reflect on a day I don’t recall feeling stressed, negative or anxious if I’ve taken part in wellbeing activities. This is really important when you’re learning a lot of new concepts and constantly feeling out of depth. You really need to ground yourself.&lt;/p&gt;

&lt;p&gt;I’ll just finish today by saying.. “ommmmmmmmmm”&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Jun 2015 21:51:52 +0100</pubDate>
        <link>http://natstar93.github.io//week2/2015/06/15/day-6.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week2/2015/06/15/day-6.html</guid>
        
        
        <category>week2</category>
        
      </item>
    
      <item>
        <title>Day 5 | Double Trouble</title>
        <description>&lt;p&gt;Since there are an odd number in our cohort, today I ended up in a three instead of a pair for the day’s activities. I was a little aprehensive about this because I’d been told it was quite difficult. In actual fact it turned out to be an incredibly productive day and opened up a lot of discussion about various concepts we were studying. I feel like I learned so much today just from talking things though with my little group!&lt;/p&gt;

&lt;p&gt;A concept we were introduced to yesterday and began using today was ‘doubles’. When performing any kind of testing it’s really important to only test/vary one element at a time to ensure you are truly testing the correct thing. However, it turned out a lot of the docking station methods we had built relied on bikes being created correctly or returning from a method call with certain properties, so our docking station unit tests weren’t really fair. If there was an error in the bike’s report_broken method this could propagate though and affect the result of release_bike method.&lt;/p&gt;

&lt;p&gt;Doubles are objects that you can give certain properties to in order for them to accurately impersonate your objects.&lt;/p&gt;

&lt;p&gt;In the example mentioned above, if we were wanting to check that the release_bike method released broken bikes only we might use the following double:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bike = double :bike, broken? true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That way we could be sure that we were testing the behaviour of the method only, not the behaviour of the bike.&lt;/p&gt;

&lt;p&gt;It sounds very simple but there were some complications around ensuring your tests are actually testing your method, and not the double itself! We also briefly looked at stubs and mocks, which can be used to simulate the behaviour an object might display after having certain methods called on it.&lt;/p&gt;

&lt;p&gt;We did some activities to assess our progress so far this afternoon and consolidated the learning objectives. I can safely say it’s been a hell of a week and I’ve learnt absolutely loads! I made a few little second week resolutions to myself to ensure that I stay on track and went home happy and looking forward to the weekend and the ‘airport challenge’ which is due on Monday morning!&lt;/p&gt;

&lt;p&gt;Nat x&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Jun 2015 21:51:52 +0100</pubDate>
        <link>http://natstar93.github.io//week1/2015/06/12/day-5.html</link>
        <guid isPermaLink="true">http://natstar93.github.io//week1/2015/06/12/day-5.html</guid>
        
        
        <category>week1</category>
        
      </item>
    
  </channel>
</rss>
